{
  "version": "2.4.3.0",
  "elements": [
    {
      "Options": {
        "Device Space": {
          "ValueType": "Int",
          "Value": 0
        },
        "Default Bank": {
          "ValueType": "Int",
          "Value": 1
        },
        "Disable OnyxExternalMidi": {
          "ValueType": "Boolean",
          "Value": true
        },
        "Connection Timeout (min)": {
          "ValueType": "Int",
          "Value": 1
        }
      },
      "CustomOptions": {},
      "IsEnabled": true,
      "ID": "Onyx",
      "DriverName": "Onyx",
      "DriverGroup": "Obsidian",
      "DriverSuperGroup": "Lighting",
      "LogLevel": 2
    },
    {
      "Options": null,
      "CustomOptions": {},
      "IsEnabled": true,
      "ID": "Keyboard Keys",
      "DriverName": "Keyboard Keys",
      "DriverGroup": "Keyboard and Mouse",
      "DriverSuperGroup": "External Control",
      "LogLevel": 2
    },
    {
      "Options": {},
      "CustomOptions": {
        "luaScript": "-- ShowCockpit LUA Script: UpdateCueFadeCuelistRelease\r\n--   created on ShowCockpit v2.4.2\r\n--   by Spb8 Lighting\r\n--   on 05-09-2018\r\n\r\n-------------\r\n-- Purpose --\r\n-------------\r\n-- This script allows to update the cues fade times in the meantime of the cuelist release time\r\n\r\n---------------\r\n-- Changelog --\r\n---------------\r\n-- 07-09-2018 - 1.2: Add some block of comment for clearer code reading\r\n--                  + Rename some variables for clearer code reading\r\n-- 07-09-2018 - 1.1: Fix issue with time value of 0 which was cancelling the script\r\n-- 05-09-2018 - 1.0: Creation\r\n\r\n-------------------\r\n-- Configuration --\r\n-------------------\r\n\r\nSettings = {\r\n\tWaitTime = 0.05\r\n}\r\n\r\nScriptInfos = {\r\n\tversion = \"1.2\",\r\n\tname = \"UpdateCueFadeCuelistRelease\"\r\n}\r\n\r\n-- ShowCockpit LUA Script: LuaHeader for Spb8 Lighting LUA Script\r\n\r\n---------------\r\n-- Changelog --\r\n---------------\r\n-- 07-09-2018 - 1.2: Fix input number max issue\r\n--              + add Word.Script.Cancel text value\r\n--              + add Form.Preset list values\r\n--              + update Default Preset Appearance to match Onyx Colors\r\n--              + reword some function parameter name\r\n--              + add ListCuelit()\r\n--              + add the possibility to define default value for InputNumber and InputFloatNumber\r\n-- 06-09-2018 - 1.1: Add Preset Name Framing, Add Generic GetPresetName, Add Generic DeletePreset\r\n-- 05-09-2018 - 1.0: Creation\r\n\r\n--------------------\r\n--    Variables   --\r\n--------------------\r\n\r\nif Settings.WaitTime == nil or Settings.WaitTime == \"\" then\r\n\tSettings.WaitTime = 0.5\r\nend\r\n\r\nPresetName = {\r\n    Intensity = \"Intensity\",\r\n\tPanTilt = \"PanTilt\",\r\n\tColor = \"Color\",\r\n\tGobo = \"Gobo\",\r\n\tBeam = \"Beam\",\r\n\tBeamFX = \"BeamFX\",\r\n\tFraming = \"Framing\"\r\n}\r\n\r\nScriptInfos = {\r\n\tversion = ScriptInfos.version,\r\n\tname = ScriptInfos.name,\r\n\tauthor = \"Sylvain Guiblain\",\r\n\tcontact = \"sylvain.guiblain@gmail.com\",\r\n\twebsite = \"https://github.com/Spb8Lighting/OnyxLuaScripts\"\r\n}\r\n\r\nInfos = {\r\n\tSentence = \"Scripted by \" .. ScriptInfos.author .. \"\\r\\n\\r\\n\" .. ScriptInfos.contact .. \"\\r\\n\\r\\n\" .. ScriptInfos.website,\r\n\tScript = ScriptInfos.name .. \" v\" .. ScriptInfos.version\r\n}\r\n\r\nAppearance = {\r\n\tWhite = \"#-1551\",\r\n\tRed = \"#-2686966\",\r\n\tOrange = \"#-33280\",\r\n\tYellow = \"#-2560\",\r\n\tLime = \"#-3342592\",\r\n\tGreen = \"#-16711936\",\r\n\tCyan = \"#-167714241\",\r\n\tLightBlue = \"#-16746497\",\r\n\tBlue = \"#-16769537\",\r\n\tUv = \"#-13959025\",\r\n\tPink = \"#-52996\",\r\n\tMagenta = \"#-65333\"\r\n}\r\n\r\nDefaultAppearance = {\r\n\tIntensity = Appearance.White,\r\n\tPanTilt = Appearance.Red,\r\n\tColor = Appearance.White,\r\n    Gobo = Appearance.Green,\r\n\tBeam = Appearance.Yellow,\r\n\tBeamFX = Appearance.Cyan,\r\n\tFraming = Appearance.Magenta\r\n}\r\n\r\nBPMTiming = {\r\n\tHalf = \"1/2\",\r\n\tThird = \"1/3\",\r\n\tQuarter = \"1/4\"\r\n}\r\n\r\nWord = {\r\n    Script = {\r\n        Cancel = \"Script has been cancelled! Nothing performed.\"\r\n    },\r\n\tOk = \"Ok\",\r\n\tCancel = \"Cancel\",\r\n\tReset = \"Reset\",\r\n\tYes = \"Yes\",\r\n\tNo = \"No\",\r\n\tVertical = \"Vertical\",\r\n\tHorizontal = \"Horizontal\"\r\n}\r\n\r\nForm = {\r\n\tOk = {\r\n\t\tWord.Ok\r\n\t},\r\n\tOkCancel = {\r\n\t\tWord.Ok,\r\n\t\tWord.Cancel\r\n\t},\r\n\tYesNo = {\r\n\t\tWord.Yes,\r\n\t\tWord.No\r\n    },\r\n    Preset = {\r\n        PresetName.Intensity,\r\n        PresetName.PanTilt,\r\n        PresetName.Color,\r\n        PresetName.Gobo,\r\n        PresetName.Beam,\r\n        PresetName.BeamFX,\r\n        PresetName.Framing\r\n    }\r\n}\r\n\r\n-- Get Onyx Software object\r\n\r\nOnyx = GetElement(\"Onyx\")\r\n\r\n--------------------\r\n--General Function--\r\n--------------------\r\n\r\nfunction HeadPrint()\r\n\tLogInformation(Infos.Script .. \"\\r\\n\\t\" .. Infos.Sentence) --Notification\r\nend\r\n\r\nfunction FootPrint(Sentence)\r\n\tLogInformation(Sentence .. \"\\r\\n\\t\" .. Infos.Sentence)\r\n\tInfos = {\r\n\t\tQuestion = Infos.Script,\r\n\t\tDescription = Sentence .. \"\\r\\n\\r\\n\" .. Infos.Sentence,\r\n\t\tButtons = Form.Ok,\r\n\t\tDefaultButton = Word.Ok\r\n\t}\r\n\tInputYesNo(Infos)\r\nend\r\n\r\nfunction Cancelled(variable)\r\n\tif variable == nil or variable == \"\" then\r\n\t\tFootPrint(Word.Script.Cancel)\r\n\t\treturn true\r\n\telse\r\n\t\treturn false\r\n\tend\r\nend\r\n\r\nfunction CheckInput(Infos, Answer)\r\n\tif Answer[\"button\"] == Word.Yes then\r\n\t\tAnswer[\"input\"] = true\r\n\tend\r\n\tif Infos.Cancel == true then\r\n\t\tif Answer[\"button\"] == Word.Yes then\r\n\t\t\tAnswer[\"input\"] = true\r\n\t\telseif Answer[\"button\"] == Word.Cancel or Answer[\"button\"] == Word.No then\r\n\t\t\tAnswer[\"input\"] = nil\r\n\t\tend\r\n\tend\r\n\treturn Answer\r\nend\r\n\r\nfunction Input(Infos, Type)\r\n\t-- Create the Prompt\r\n\tPrompt = CreatePrompt(Infos.Question, Infos.Description)\r\n\r\n\t-- Prompt settings\r\n\tif Type then\r\n\t\tPrompt.SetType(Type)\r\n\tend\r\n\tPrompt.SetButtons(Infos.Buttons)\r\n\tPrompt.SetDefaultButton(Infos.DefaultButton)\r\n\r\n\t-- Return the prompt\r\n\treturn Prompt\r\nend\r\n\r\nfunction InputDropDown(Infos)\r\n\t-- Get the IntegerInput Prompt with default settings\r\n\tPrompt = Input(Infos, \"DropDown\")\r\n\t-- Prompt settings\r\n\tPrompt.SetDropDownOptions(Infos.DropDown)\r\n\tPrompt.SetDefaultValue(Infos.DropDownDefault)\r\n\r\n\treturn ShowInput(Prompt, Infos)\r\nend\r\n\r\nfunction InputYesNo(Infos)\r\n\t-- Get the IntegerInput Prompt with default settings\r\n\tPrompt = Input(Infos)\r\n\treturn ShowInput(Prompt, Infos)\r\nend\r\n\r\nfunction InputNumber(Infos)\r\n\t-- Get the IntegerInput Prompt with default settings\r\n\tPrompt = Input(Infos, \"IntegerInput\")\r\n\t-- Prompt settings\r\n\tPrompt.SetMinValue(1)\r\n\tPrompt.SetMaxValue(10000)\r\n\tif Infos.CurrentValue then\r\n\t\tPrompt.SetDefaultValue(Infos.CurrentValue)\r\n\tend\r\n\r\n\treturn ShowInput(Prompt, Infos)\r\nend\r\n\r\nfunction InputFloatNumber(Infos)\r\n\t-- Get the IntegerInput Prompt with default settings\r\n\tPrompt = Input(Infos, \"FloatInput\")\r\n\t-- Prompt settings\r\n\tPrompt.SetMinValue(0)\r\n\tif Infos.CurrentValue then\r\n\t\tPrompt.SetDefaultValue(Infos.CurrentValue)\r\n\tend\r\n\r\n\treturn ShowInput(Prompt, Infos)\r\nend\r\n\r\nfunction ShowInput(Prompt, Infos)\r\n\t-- Display the prompt\r\n\tAnswer = Prompt.Show()\r\n\r\n\treturn CheckInput(Infos, Answer)[\"input\"]\r\nend\r\n\r\n--------------------\r\n--     Logging    --\r\n--------------------\r\n\r\nMessages = {}\r\n\r\nfunction LogActivity(text)\r\n\ttable.insert(Messages, text)\r\nend\r\n\r\nfunction GetActivity()\r\n\tlocal Feedback = \"\"\r\n\tfor i, Message in pairs(Messages) do\r\n\t\tFeedback = Feedback .. \"\\n\" .. Message\r\n\tend\r\n\treturn Feedback\r\nend\r\n\r\n--------------------\r\n--   Functions    --\r\n--------------------\r\n\r\nfunction trim(s)\r\n\treturn (s:gsub(\"^%s*(.-)%s*$\", \"%1\"))\r\nend\r\n\r\nfunction CopyCue(CuelistIDSource, CueID, CuelistIDTarget)\r\n\tSleep(Settings.WaitTime)\r\n\tOnyx.SelectCuelist(CuelistIDSource)\r\n\tSleep(Settings.WaitTime)\r\n\tOnyx.Key_ButtonClick(\"Copy\")\r\n\tSleep(Settings.WaitTime)\r\n\tOnyx.Key_ButtonClick(\"Cue\")\r\n\tSleep(Settings.WaitTime)\r\n\tKeyNumber(CueID)\r\n\tOnyx.Key_ButtonClick(\"At\")\r\n\tSleep(Settings.WaitTime)\r\n\tOnyx.SelectCuelist(CuelistIDTarget)\r\n\tSleep(Settings.WaitTime)\r\n\tOnyx.Key_ButtonClick(\"Enter\")\r\n\tSleep(Settings.WaitTime)\r\nend\r\n\r\nfunction KeyNumber(Number)\r\n\tif string.find(Number, \"%d\", 1, false) then\r\n\t\ta = string.match(Number, \"(.+)\")\r\n\t\tfor c in a:gmatch \".\" do\r\n\t\t\tOnyx.Key_ButtonClick(\"Num\" .. c)\r\n\t\tend\r\n\t\tSleep(Settings.WaitTime)\r\n\tend\r\nend\r\n\r\nfunction RecordCuelist(CuelistID)\r\n\tOnyx.Key_ButtonClick(\"Record\")\r\n\tSleep(Settings.WaitTime)\r\n\tOnyx.Key_ButtonClick(\"Slash\")\r\n\tSleep(Settings.WaitTime)\r\n\tOnyx.Key_ButtonClick(\"Slash\")\r\n\tKeyNumber(CuelistID)\r\n\tOnyx.Key_ButtonClick(\"Enter\")\r\n\tSleep(Settings.WaitTime)\r\n\tOnyx.Key_ButtonClick(\"Enter\")\r\n\treturn true\r\nend\r\n\r\nfunction CheckEmpty(Chain, default)\r\n\tif Chain == nil or Chain == \"\" then\r\n\t\tif default then\r\n\t\t\treturn default\r\n\t\telse\r\n\t\t\treturn \"---\"\r\n\t\tend\r\n\telse\r\n\t\treturn Chain\r\n\tend\r\nend\r\n\r\nfunction GetPresetName(PresetType, PresetID)\r\n\tif PresetType == PresetName.PanTilt then\r\n\t\treturn CheckEmpty(Onyx.GetPanTiltPresetName(PresetID))\r\n\telseif PresetType == PresetName.Color then\r\n\t\treturn CheckEmpty(Onyx.GetColorPresetName(PresetID))\r\n\telseif PresetType == PresetName.Intensity then\r\n\t\treturn CheckEmpty(Onyx.GetIntensityPresetName(PresetID))\r\n\telseif PresetType == PresetName.Gobo then\r\n\t\treturn CheckEmpty(Onyx.GetGoboPresetName(PresetID))\r\n\telseif PresetType == PresetName.Beam then\r\n\t\treturn CheckEmpty(Onyx.GetBeamPresetName(PresetID))\r\n\telseif PresetType == PresetName.BeamFX then\r\n\t\treturn CheckEmpty(Onyx.GetBeamFXPresetName(PresetID))\r\n\telseif PresetType == PresetName.Framing then\r\n\t\treturn CheckEmpty(Onyx.GetFramingPresetName(PresetID))\r\n\telse\r\n\t\treturn false\r\n\tend\r\nend\r\n\r\nfunction GetPresetAppearance(PresetType, PresetID)\r\n\tif PresetType == PresetName.PanTilt then\r\n\t\treturn CheckEmpty(Onyx.GetPanTiltPresetAppearance(PresetID), DefaultAppearance.PanTilt)\r\n\telseif PresetType == PresetName.Color then\r\n\t\treturn CheckEmpty(Onyx.GetColorPresetAppearance(PresetID), DefaultAppearance.Color)\r\n\telseif PresetType == PresetName.Intensity then\r\n\t\treturn CheckEmpty(Onyx.GetIntensityPresetAppearance(PresetID), DefaultAppearance.Intensity)\r\n\telseif PresetType == PresetName.Gobo then\r\n\t\treturn CheckEmpty(Onyx.GetGoboPresetAppearance(PresetID), DefaultAppearance.Gobo)\r\n\telseif PresetType == PresetName.Beam then\r\n\t\treturn CheckEmpty(Onyx.GetBeamPresetAppearance(PresetID), DefaultAppearance.Beam)\r\n\telseif PresetType == PresetName.BeamFX then\r\n\t\treturn CheckEmpty(Onyx.GetBeamFXPresetAppearance(PresetID), DefaultAppearance.BeamFX)\r\n\telseif PresetType == PresetName.Framing then\r\n\t\treturn CheckEmpty(Onyx.GetFramingPresetAppearance(PresetID), DefaultAppearance.Framing)\r\n\telse\r\n\t\treturn false\r\n\tend\r\nend\r\n\r\nfunction DeletePreset(PresetType, PresetID)\r\n\tif PresetType == PresetName.PanTilt then\r\n\t\tOnyx.DeletePanTiltPreset(PresetID)\r\n\telseif PresetType == PresetName.Color then\r\n\t\tOnyx.DeleteColorPreset(PresetID)\r\n\telseif PresetType == PresetName.Intensity then\r\n\t\tOnyx.DeleteIntensityPreset(PresetID)\r\n\telseif PresetType == PresetName.Gobo then\r\n\t\tOnyx.DeleteGoboPreset(PresetID)\r\n\telseif PresetType == PresetName.Beam then\r\n\t\tOnyx.DeleteBeamPreset(PresetID)\r\n\telseif PresetType == PresetName.BeamFX then\r\n\t\tOnyx.DeleteBeamFXPreset(PresetID)\r\n\telseif PresetType == PresetName.Framing then\r\n\t\tOnyx.DeleteFramingPreset(PresetID)\r\n\tend\r\n\treturn true\r\nend\r\n\r\nfunction ListPreset(PresetType, PresetIDStart, PresetIDEnd)\r\n\tPresets = {}\r\n\tfor i = PresetIDStart, PresetIDEnd, 1 do\r\n\t\ttable.insert(\r\n\t\t\tPresets,\r\n\t\t\t{\r\n\t\t\t\tid = i,\r\n\t\t\t\tname = GetPresetName(PresetType, i),\r\n\t\t\t\tappearance = GetPresetAppearance(PresetType, i)\r\n\t\t\t}\r\n\t\t)\r\n\tend\r\n\treturn Presets\r\nend\r\n\r\nfunction ListCuelist(CuelistIDStart, CuelistIDEnd)\r\n\tCuelists = {}\r\n\tfor i = CuelistIDStart, CuelistIDEnd, 1 do\r\n\t\ttable.insert(\r\n\t\t\tCuelists,\r\n\t\t\t{\r\n\t\t\t\tid = i,\r\n\t\t\t\tname = CheckEmpty(Onyx.GetCuelistName(i))\r\n\t\t\t}\r\n\t\t)\r\n\tend\r\n\treturn Cuelists\r\nend\r\n\r\nHeadPrint()\r\n-- End of Header --\r\n\r\n\r\n\r\n----------------------------------------------------\r\n-- Main Script - dont change if you don't need to --\r\n----------------------------------------------------\r\n\r\n--------------------------\r\n-- Sentence and Wording --\r\n--------------------------\r\n\r\nContent = {\r\n\tDone = \"Update Finished!\",\r\n\tCuelistList = \"Cuelists List:\",\r\n\tCuelist = {\r\n\t\tOption = \"Cuelist Options:\",\r\n\t\tFrom = {\r\n\t\t\tQuestion = \"From Cuelist n°\",\r\n\t\t\tDescription = \"Indicate the first Cuelist ID number where to update the release time (and its cue(s) fade time)\"\r\n\t\t},\r\n\t\tTo = {\r\n\t\t\tQuestion = \"To Cuelist n°\",\r\n\t\t\tDescription = \"Indicate the first Cuelist ID number where to update the release time (and its cue(s) fade time)\"\r\n\t\t},\r\n\t\tTime = {\r\n\t\t\tQuestion = \"Cuelist Release Time:\",\r\n\t\t\tDescription = \"Indicate the awaiting Cuelist release time (in seconds)\"\r\n\t\t}\r\n\t},\r\n\tCue = {\r\n\t\tOption = \"Cue Options:\",\r\n\t\tFrom = {\r\n\t\t\tQuestion = \"From Cue n°\",\r\n\t\t\tDescription = \"Indicate the first Cue ID number where to update the fade time\"\r\n\t\t},\r\n\t\tTo = {\r\n\t\t\tQuestion = \"To Cue n°\",\r\n\t\t\tDescription = \"Indicate the last Cue ID number where to update the fade time\"\r\n\t\t},\r\n\t\tTime = {\r\n\t\t\tQuestion = \"Cue Fade Time:\",\r\n\t\t\tDescription = \"Indicate the awaiting Cue fade time (in seconds)\"\r\n\t\t}\r\n\t},\r\n\tValidation = {\r\n\t\tQuestion = \"Do you agree to update the cue fade and cuelist release time?\",\r\n\t\tDescription = \"WARNING, it can't be UNDO! Use it with caution!\"\r\n\t}\r\n}\r\n\r\n--------------------------\r\n-- Collect Informations --\r\n--------------------------\r\n\r\n--# REQUEST the Cuelist Range # --\r\n----------------------------------\r\n\r\n-- Request the Start Cuelist ID n°\r\nInputSettings = {\r\n\tQuestion = Content.Cuelist.From.Question,\r\n\tDescription = Content.Cuelist.From.Description,\r\n\tButtons = Form.OkCancel,\r\n\tDefaultButton = Word.Ok,\r\n\tCancel = true\r\n}\r\n\r\nSettings.CuelistIDStart = InputNumber(InputSettings)\r\n\r\nif Cancelled(Settings.CuelistIDStart) then\r\n\tgoto EXIT\r\nend\r\n\r\n-- Request the Last Cuelist ID n°\r\nInputSettings.Question = Content.Cuelist.To.Question\r\nInputSettings.Description = Content.Cuelist.To.Description\r\n\r\nSettings.CuelistIDEnd = InputNumber(InputSettings)\r\n\r\nif Cancelled(Settings.CuelistIDEnd) then\r\n\tgoto EXIT\r\nend\r\n\r\n--# REQUEST the Cuelist Release Time # --\r\n-----------------------------------------\r\n\r\nInputSettings.Question = Content.Cuelist.Time.Question\r\nInputSettings.Description = Content.Cuelist.Time.Description\r\n\r\nSettings.TimeRelease = InputFloatNumber(InputSettings)\r\n\r\nif Cancelled(Settings.TimeRelease) then\r\n\tgoto EXIT\r\nend\r\n\r\n--# REQUEST the Cue Range # --\r\n------------------------------\r\n\r\n-- Request the start Cue ID n°\r\nInputSettings.Question = Content.Cue.From.Question\r\nInputSettings.Description = Content.Cue.From.Description\r\n\r\nSettings.CueIDStart = InputNumber(InputSettings)\r\nif Cancelled(Settings.CueIDStart) then\r\n\tgoto EXIT\r\nend\r\n\r\n-- Request the Last Cue ID n°\r\nInputSettings.Question = Content.Cue.To.Question\r\nInputSettings.Description = Content.Cue.To.Description\r\n\r\nSettings.CueIDEnd = InputNumber(InputSettings)\r\nif Cancelled(Settings.CueIDEnd) then\r\n\tgoto EXIT\r\nend\r\n\r\n--# REQUEST the Cue Fading Time # --\r\n------------------------------------\r\n\r\nInputSettings.Question = Content.Cue.Time.Question\r\nInputSettings.Description = Content.Cue.Time.Description\r\n\r\nSettings.TimeFade = InputFloatNumber(InputSettings)\r\n\r\nif Cancelled(Settings.TimeFade) then\r\n\tgoto EXIT\r\nend\r\n\r\n--# LOG all user choice # --\r\n----------------------------\r\n\r\n-- RESUME of action to be performed\r\n\r\n-- RESUME for Cuelist\r\nLogActivity(Content.Cuelist.Option)\r\nLogActivity(\"\\r\\n\\t\" .. \"- Update Release Time \" .. Settings.TimeRelease .. \"s for Cuelists from n°\" .. Settings.CuelistIDStart ..\" to n°\" .. Settings.CuelistIDEnd )\r\n\r\n-- RESUME for Cue\r\nLogActivity(\"\\r\\n\\r\\n\" .. Content.Cue.Option)\r\nLogActivity(\"\\r\\n\\t\" .. \"- Set Fade Time \" .. Settings.TimeFade .. \"s for Cues from n°\" .. Settings.CueIDStart .. \" to n°\" .. Settings.CueIDEnd)\r\n\r\n-- DETAIL of impacted Cuelists\r\nLogActivity(\"\\r\\n\" .. Content.CuelistList)\r\n\r\nCuelists = ListCuelist(Settings.CuelistIDStart, Settings.CuelistIDEnd)\r\n\r\nfor i, Cuelist in pairs(Cuelists) do\r\n    LogActivity(\"\\r\\n\\t\" .. '- n°' .. Cuelist.id .. ' ' .. Cuelist.name)\r\nend\r\n\r\n--# USER Validation # --\r\n------------------------\r\n\r\nInputValidationSettings = {\r\n\tQuestion = Content.Validation.Question,\r\n\tDescription = Content.Validation.Description .. \"\\n\\r\\n\\r\" .. GetActivity(),\r\n\tButtons = Form.YesNo,\r\n\tDefaultButton = Word.Yes\r\n}\r\n\r\nSettings.Validation = InputYesNo(InputValidationSettings)\r\n\r\n--------------------------\r\n--      Execution       --\r\n--------------------------\r\n\r\nif Settings.Validation then\r\n    -- Iterate through the Cuelist list\r\n\tfor CuelistID = Settings.CuelistIDStart, Settings.CuelistIDEnd do\r\n\t\tOnyx.SelectCuelist(CuelistID)\r\n        Sleep(Settings.WaitTime)\r\n        -- Iterate through the Cue list\r\n\t\tfor ActCue = Settings.CueIDStart, Settings.CueIDEnd do\r\n\t\t\tOnyx.SetCueFadeTime(ActCue, Settings.TimeFade)\r\n\t\t\tSleep(Settings.WaitTime)\r\n\t\tend\r\n\t\tOnyx.SetCuelistReleaseTime(CuelistID, Settings.TimeRelease)\r\n\t\tSleep(Settings.WaitTime)\r\n    end\r\n    -- Display a end pop-up\r\n\tFootPrint(Content.Done)\r\nelse\r\n\tCancelled()\r\nend\r\n::EXIT::\r\n"
      },
      "IsEnabled": false,
      "ID": "F1 - Update Cue Fade Cuelist Release",
      "DriverName": "LUA Script",
      "DriverGroup": "ShowCockpit",
      "DriverSuperGroup": "Utilities",
      "LogLevel": 2
    },
    {
      "Options": {},
      "CustomOptions": {
        "luaScript": "-- ShowCockpit LUA Script: CreatePlaybacksFromPresets\r\n--   created on ShowCockpit v2.4.2\r\n--   by Spb8 Lighting\r\n--   on 05-09-2018\r\n\r\n-------------\r\n-- Purpose --\r\n-------------\r\n-- This script allows to create playback(s) cuelist from preset(s)\r\n\r\n---------------\r\n-- Changelog --\r\n---------------\r\n-- 07-09-2018 - 1.0: Creation\r\n\r\n-------------------\r\n-- Configuration --\r\n-------------------\r\n\r\nSettings = {\r\n    WaitTime = 0.5,\r\n    HarmonizeCLName = true, -- Default: true > If preset name has the group name, the script will remove take the preset name without the group name to format the cuelist name\r\n    Optimize = true, -- Default: true > Activate optimization to speed up execution (take care, this option can break the result) [-6 x Waitime per playback button]\r\n    RenameCue = false, -- Default: false > Activate the cue Renaming with preset name (increase the performance)\r\n    Step = 1\r\n}\r\n\r\nScriptInfos = {\r\n    version = \"1.0\",\r\n    name = \"CreatePlaybacksFromPresets\"\r\n}\r\n\r\n-- ShowCockpit LUA Script: LuaHeader for Spb8 Lighting LUA Script\r\n\r\n---------------\r\n-- Changelog --\r\n---------------\r\n-- 07-09-2018 - 1.2: Fix input number max issue\r\n--              + add Word.Script.Cancel text value\r\n--              + add Form.Preset list values\r\n--              + update Default Preset Appearance to match Onyx Colors\r\n--              + reword some function parameter name\r\n--              + add ListCuelit()\r\n--              + add the possibility to define default value for InputNumber and InputFloatNumber\r\n-- 06-09-2018 - 1.1: Add Preset Name Framing, Add Generic GetPresetName, Add Generic DeletePreset\r\n-- 05-09-2018 - 1.0: Creation\r\n\r\n--------------------\r\n--    Variables   --\r\n--------------------\r\n\r\nif Settings.WaitTime == nil or Settings.WaitTime == \"\" then\r\n\tSettings.WaitTime = 0.5\r\nend\r\n\r\nPresetName = {\r\n    Intensity = \"Intensity\",\r\n\tPanTilt = \"PanTilt\",\r\n\tColor = \"Color\",\r\n\tGobo = \"Gobo\",\r\n\tBeam = \"Beam\",\r\n\tBeamFX = \"BeamFX\",\r\n\tFraming = \"Framing\"\r\n}\r\n\r\nScriptInfos = {\r\n\tversion = ScriptInfos.version,\r\n\tname = ScriptInfos.name,\r\n\tauthor = \"Sylvain Guiblain\",\r\n\tcontact = \"sylvain.guiblain@gmail.com\",\r\n\twebsite = \"https://github.com/Spb8Lighting/OnyxLuaScripts\"\r\n}\r\n\r\nInfos = {\r\n\tSentence = \"Scripted by \" .. ScriptInfos.author .. \"\\r\\n\\r\\n\" .. ScriptInfos.contact .. \"\\r\\n\\r\\n\" .. ScriptInfos.website,\r\n\tScript = ScriptInfos.name .. \" v\" .. ScriptInfos.version\r\n}\r\n\r\nAppearance = {\r\n\tWhite = \"#-1551\",\r\n\tRed = \"#-2686966\",\r\n\tOrange = \"#-33280\",\r\n\tYellow = \"#-2560\",\r\n\tLime = \"#-3342592\",\r\n\tGreen = \"#-16711936\",\r\n\tCyan = \"#-167714241\",\r\n\tLightBlue = \"#-16746497\",\r\n\tBlue = \"#-16769537\",\r\n\tUv = \"#-13959025\",\r\n\tPink = \"#-52996\",\r\n\tMagenta = \"#-65333\"\r\n}\r\n\r\nDefaultAppearance = {\r\n\tIntensity = Appearance.White,\r\n\tPanTilt = Appearance.Red,\r\n\tColor = Appearance.White,\r\n    Gobo = Appearance.Green,\r\n\tBeam = Appearance.Yellow,\r\n\tBeamFX = Appearance.Cyan,\r\n\tFraming = Appearance.Magenta\r\n}\r\n\r\nBPMTiming = {\r\n\tHalf = \"1/2\",\r\n\tThird = \"1/3\",\r\n\tQuarter = \"1/4\"\r\n}\r\n\r\nWord = {\r\n    Script = {\r\n        Cancel = \"Script has been cancelled! Nothing performed.\"\r\n    },\r\n\tOk = \"Ok\",\r\n\tCancel = \"Cancel\",\r\n\tReset = \"Reset\",\r\n\tYes = \"Yes\",\r\n\tNo = \"No\",\r\n\tVertical = \"Vertical\",\r\n\tHorizontal = \"Horizontal\"\r\n}\r\n\r\nForm = {\r\n\tOk = {\r\n\t\tWord.Ok\r\n\t},\r\n\tOkCancel = {\r\n\t\tWord.Ok,\r\n\t\tWord.Cancel\r\n\t},\r\n\tYesNo = {\r\n\t\tWord.Yes,\r\n\t\tWord.No\r\n    },\r\n    Preset = {\r\n        PresetName.Intensity,\r\n        PresetName.PanTilt,\r\n        PresetName.Color,\r\n        PresetName.Gobo,\r\n        PresetName.Beam,\r\n        PresetName.BeamFX,\r\n        PresetName.Framing\r\n    }\r\n}\r\n\r\n-- Get Onyx Software object\r\n\r\nOnyx = GetElement(\"Onyx\")\r\n\r\n--------------------\r\n--General Function--\r\n--------------------\r\n\r\nfunction HeadPrint()\r\n\tLogInformation(Infos.Script .. \"\\r\\n\\t\" .. Infos.Sentence) --Notification\r\nend\r\n\r\nfunction FootPrint(Sentence)\r\n\tLogInformation(Sentence .. \"\\r\\n\\t\" .. Infos.Sentence)\r\n\tInfos = {\r\n\t\tQuestion = Infos.Script,\r\n\t\tDescription = Sentence .. \"\\r\\n\\r\\n\" .. Infos.Sentence,\r\n\t\tButtons = Form.Ok,\r\n\t\tDefaultButton = Word.Ok\r\n\t}\r\n\tInputYesNo(Infos)\r\nend\r\n\r\nfunction Cancelled(variable)\r\n\tif variable == nil or variable == \"\" then\r\n\t\tFootPrint(Word.Script.Cancel)\r\n\t\treturn true\r\n\telse\r\n\t\treturn false\r\n\tend\r\nend\r\n\r\nfunction CheckInput(Infos, Answer)\r\n\tif Answer[\"button\"] == Word.Yes then\r\n\t\tAnswer[\"input\"] = true\r\n\tend\r\n\tif Infos.Cancel == true then\r\n\t\tif Answer[\"button\"] == Word.Yes then\r\n\t\t\tAnswer[\"input\"] = true\r\n\t\telseif Answer[\"button\"] == Word.Cancel or Answer[\"button\"] == Word.No then\r\n\t\t\tAnswer[\"input\"] = nil\r\n\t\tend\r\n\tend\r\n\treturn Answer\r\nend\r\n\r\nfunction Input(Infos, Type)\r\n\t-- Create the Prompt\r\n\tPrompt = CreatePrompt(Infos.Question, Infos.Description)\r\n\r\n\t-- Prompt settings\r\n\tif Type then\r\n\t\tPrompt.SetType(Type)\r\n\tend\r\n\tPrompt.SetButtons(Infos.Buttons)\r\n\tPrompt.SetDefaultButton(Infos.DefaultButton)\r\n\r\n\t-- Return the prompt\r\n\treturn Prompt\r\nend\r\n\r\nfunction InputDropDown(Infos)\r\n\t-- Get the IntegerInput Prompt with default settings\r\n\tPrompt = Input(Infos, \"DropDown\")\r\n\t-- Prompt settings\r\n\tPrompt.SetDropDownOptions(Infos.DropDown)\r\n\tPrompt.SetDefaultValue(Infos.DropDownDefault)\r\n\r\n\treturn ShowInput(Prompt, Infos)\r\nend\r\n\r\nfunction InputYesNo(Infos)\r\n\t-- Get the IntegerInput Prompt with default settings\r\n\tPrompt = Input(Infos)\r\n\treturn ShowInput(Prompt, Infos)\r\nend\r\n\r\nfunction InputNumber(Infos)\r\n\t-- Get the IntegerInput Prompt with default settings\r\n\tPrompt = Input(Infos, \"IntegerInput\")\r\n\t-- Prompt settings\r\n\tPrompt.SetMinValue(1)\r\n\tPrompt.SetMaxValue(10000)\r\n\tif Infos.CurrentValue then\r\n\t\tPrompt.SetDefaultValue(Infos.CurrentValue)\r\n\tend\r\n\r\n\treturn ShowInput(Prompt, Infos)\r\nend\r\n\r\nfunction InputFloatNumber(Infos)\r\n\t-- Get the IntegerInput Prompt with default settings\r\n\tPrompt = Input(Infos, \"FloatInput\")\r\n\t-- Prompt settings\r\n\tPrompt.SetMinValue(0)\r\n\tif Infos.CurrentValue then\r\n\t\tPrompt.SetDefaultValue(Infos.CurrentValue)\r\n\tend\r\n\r\n\treturn ShowInput(Prompt, Infos)\r\nend\r\n\r\nfunction ShowInput(Prompt, Infos)\r\n\t-- Display the prompt\r\n\tAnswer = Prompt.Show()\r\n\r\n\treturn CheckInput(Infos, Answer)[\"input\"]\r\nend\r\n\r\n--------------------\r\n--     Logging    --\r\n--------------------\r\n\r\nMessages = {}\r\n\r\nfunction LogActivity(text)\r\n\ttable.insert(Messages, text)\r\nend\r\n\r\nfunction GetActivity()\r\n\tlocal Feedback = \"\"\r\n\tfor i, Message in pairs(Messages) do\r\n\t\tFeedback = Feedback .. \"\\n\" .. Message\r\n\tend\r\n\treturn Feedback\r\nend\r\n\r\n--------------------\r\n--   Functions    --\r\n--------------------\r\n\r\nfunction trim(s)\r\n\treturn (s:gsub(\"^%s*(.-)%s*$\", \"%1\"))\r\nend\r\n\r\nfunction CopyCue(CuelistIDSource, CueID, CuelistIDTarget)\r\n\tSleep(Settings.WaitTime)\r\n\tOnyx.SelectCuelist(CuelistIDSource)\r\n\tSleep(Settings.WaitTime)\r\n\tOnyx.Key_ButtonClick(\"Copy\")\r\n\tSleep(Settings.WaitTime)\r\n\tOnyx.Key_ButtonClick(\"Cue\")\r\n\tSleep(Settings.WaitTime)\r\n\tKeyNumber(CueID)\r\n\tOnyx.Key_ButtonClick(\"At\")\r\n\tSleep(Settings.WaitTime)\r\n\tOnyx.SelectCuelist(CuelistIDTarget)\r\n\tSleep(Settings.WaitTime)\r\n\tOnyx.Key_ButtonClick(\"Enter\")\r\n\tSleep(Settings.WaitTime)\r\nend\r\n\r\nfunction KeyNumber(Number)\r\n\tif string.find(Number, \"%d\", 1, false) then\r\n\t\ta = string.match(Number, \"(.+)\")\r\n\t\tfor c in a:gmatch \".\" do\r\n\t\t\tOnyx.Key_ButtonClick(\"Num\" .. c)\r\n\t\tend\r\n\t\tSleep(Settings.WaitTime)\r\n\tend\r\nend\r\n\r\nfunction RecordCuelist(CuelistID)\r\n\tOnyx.Key_ButtonClick(\"Record\")\r\n\tSleep(Settings.WaitTime)\r\n\tOnyx.Key_ButtonClick(\"Slash\")\r\n\tSleep(Settings.WaitTime)\r\n\tOnyx.Key_ButtonClick(\"Slash\")\r\n\tKeyNumber(CuelistID)\r\n\tOnyx.Key_ButtonClick(\"Enter\")\r\n\tSleep(Settings.WaitTime)\r\n\tOnyx.Key_ButtonClick(\"Enter\")\r\n\treturn true\r\nend\r\n\r\nfunction CheckEmpty(Chain, default)\r\n\tif Chain == nil or Chain == \"\" then\r\n\t\tif default then\r\n\t\t\treturn default\r\n\t\telse\r\n\t\t\treturn \"---\"\r\n\t\tend\r\n\telse\r\n\t\treturn Chain\r\n\tend\r\nend\r\n\r\nfunction GetPresetName(PresetType, PresetID)\r\n\tif PresetType == PresetName.PanTilt then\r\n\t\treturn CheckEmpty(Onyx.GetPanTiltPresetName(PresetID))\r\n\telseif PresetType == PresetName.Color then\r\n\t\treturn CheckEmpty(Onyx.GetColorPresetName(PresetID))\r\n\telseif PresetType == PresetName.Intensity then\r\n\t\treturn CheckEmpty(Onyx.GetIntensityPresetName(PresetID))\r\n\telseif PresetType == PresetName.Gobo then\r\n\t\treturn CheckEmpty(Onyx.GetGoboPresetName(PresetID))\r\n\telseif PresetType == PresetName.Beam then\r\n\t\treturn CheckEmpty(Onyx.GetBeamPresetName(PresetID))\r\n\telseif PresetType == PresetName.BeamFX then\r\n\t\treturn CheckEmpty(Onyx.GetBeamFXPresetName(PresetID))\r\n\telseif PresetType == PresetName.Framing then\r\n\t\treturn CheckEmpty(Onyx.GetFramingPresetName(PresetID))\r\n\telse\r\n\t\treturn false\r\n\tend\r\nend\r\n\r\nfunction GetPresetAppearance(PresetType, PresetID)\r\n\tif PresetType == PresetName.PanTilt then\r\n\t\treturn CheckEmpty(Onyx.GetPanTiltPresetAppearance(PresetID), DefaultAppearance.PanTilt)\r\n\telseif PresetType == PresetName.Color then\r\n\t\treturn CheckEmpty(Onyx.GetColorPresetAppearance(PresetID), DefaultAppearance.Color)\r\n\telseif PresetType == PresetName.Intensity then\r\n\t\treturn CheckEmpty(Onyx.GetIntensityPresetAppearance(PresetID), DefaultAppearance.Intensity)\r\n\telseif PresetType == PresetName.Gobo then\r\n\t\treturn CheckEmpty(Onyx.GetGoboPresetAppearance(PresetID), DefaultAppearance.Gobo)\r\n\telseif PresetType == PresetName.Beam then\r\n\t\treturn CheckEmpty(Onyx.GetBeamPresetAppearance(PresetID), DefaultAppearance.Beam)\r\n\telseif PresetType == PresetName.BeamFX then\r\n\t\treturn CheckEmpty(Onyx.GetBeamFXPresetAppearance(PresetID), DefaultAppearance.BeamFX)\r\n\telseif PresetType == PresetName.Framing then\r\n\t\treturn CheckEmpty(Onyx.GetFramingPresetAppearance(PresetID), DefaultAppearance.Framing)\r\n\telse\r\n\t\treturn false\r\n\tend\r\nend\r\n\r\nfunction DeletePreset(PresetType, PresetID)\r\n\tif PresetType == PresetName.PanTilt then\r\n\t\tOnyx.DeletePanTiltPreset(PresetID)\r\n\telseif PresetType == PresetName.Color then\r\n\t\tOnyx.DeleteColorPreset(PresetID)\r\n\telseif PresetType == PresetName.Intensity then\r\n\t\tOnyx.DeleteIntensityPreset(PresetID)\r\n\telseif PresetType == PresetName.Gobo then\r\n\t\tOnyx.DeleteGoboPreset(PresetID)\r\n\telseif PresetType == PresetName.Beam then\r\n\t\tOnyx.DeleteBeamPreset(PresetID)\r\n\telseif PresetType == PresetName.BeamFX then\r\n\t\tOnyx.DeleteBeamFXPreset(PresetID)\r\n\telseif PresetType == PresetName.Framing then\r\n\t\tOnyx.DeleteFramingPreset(PresetID)\r\n\tend\r\n\treturn true\r\nend\r\n\r\nfunction ListPreset(PresetType, PresetIDStart, PresetIDEnd)\r\n\tPresets = {}\r\n\tfor i = PresetIDStart, PresetIDEnd, 1 do\r\n\t\ttable.insert(\r\n\t\t\tPresets,\r\n\t\t\t{\r\n\t\t\t\tid = i,\r\n\t\t\t\tname = GetPresetName(PresetType, i),\r\n\t\t\t\tappearance = GetPresetAppearance(PresetType, i)\r\n\t\t\t}\r\n\t\t)\r\n\tend\r\n\treturn Presets\r\nend\r\n\r\nfunction ListCuelist(CuelistIDStart, CuelistIDEnd)\r\n\tCuelists = {}\r\n\tfor i = CuelistIDStart, CuelistIDEnd, 1 do\r\n\t\ttable.insert(\r\n\t\t\tCuelists,\r\n\t\t\t{\r\n\t\t\t\tid = i,\r\n\t\t\t\tname = CheckEmpty(Onyx.GetCuelistName(i))\r\n\t\t\t}\r\n\t\t)\r\n\tend\r\n\treturn Cuelists\r\nend\r\n\r\nHeadPrint()\r\n-- End of Header --\r\n\r\n\r\n\r\n----------------------------------------------------\r\n-- Main Script - dont change if you don't need to --\r\n----------------------------------------------------\r\n\r\n--------------------------\r\n-- Sentence and Wording --\r\n--------------------------\r\n\r\nContent = {\r\n    StopMessage = \"Stopped!\" .. \"\\r\\n\\t\" .. \"The Preset type defined in the script configuration is not supported\",\r\n    Done = \"Deletion Ended!\",\r\n    Options = \"Delete Options:\",\r\n    Presets = {\r\n        Options = \"Presets Options:\",\r\n        List = \"Preset list:\"\r\n    },\r\n    Select = {\r\n        Question = \"Which type of preset will be used to create playback?\",\r\n        Description = \"Please select the preset type to create playback from the list:\"\r\n    },\r\n    Groups = {\r\n        Options = \"Groups Options:\",\r\n        List = \"Group list:\",\r\n        Question = \"How many fixture groups will be used?\",\r\n        Description = \"Please indicate the quantity of groups where to create playbacks:\"\r\n    },\r\n    Cuelist = {\r\n        From = {\r\n            Question = \"Create playbacks from Preset n°\",\r\n            Description = \"Indicate the first Preset ID number:\"\r\n        },\r\n        To = {\r\n            Question = \"Create playbacks until Preset n°\",\r\n            Description = \"Indicate the last Preset ID number:\"\r\n        },\r\n        Time = {\r\n            Question = \"Cuelist Release Time:\",\r\n            Description = \"Indicate the awaiting Cuelist release time (in seconds)\"\r\n        }\r\n    },\r\n    Playback = {\r\n        Options = \"Playback Options:\",\r\n        Page = {\r\n            Question = \"Which playback page n° to create playbacks?\",\r\n            Description = \"Indicate playback page ID where to create playbacks:\"\r\n        },\r\n        Button = {\r\n            Question = \"Which playback button n° to start creating playback?\",\r\n            Description = \"Indicate playback button ID number where to start creating playback:\"\r\n        },\r\n        Arrangement = {\r\n            Question = \"Which playback arrangement do you want?\",\r\n            Description = \"Choose the playback button arrangement of your choice:\"\r\n        },\r\n        Grid = {\r\n            Question = \"What is your playback page width?\",\r\n            Description = \"Indicate the playback page width (column):\"\r\n        }\r\n    },\r\n    Cue = {\r\n        Time = {\r\n            Question = \"Cue Fade Time:\",\r\n            Description = \"Indicate the awaiting Cue fade time (in seconds)\"\r\n        }\r\n    },\r\n    Records = {\r\n        Options = \"Records Options:\"\r\n    },\r\n    Validation = {\r\n        Question = \"Do you want to create the playbacks?\"\r\n    }\r\n}\r\n\r\n--------------------------\r\n--      Functions       --\r\n--------------------------\r\n\r\nfunction SleepOption()\r\n    if Settings.Optimize == false then\r\n        Sleep(Settings.WaitTime)\r\n    end\r\nend\r\n\r\nfunction CuelistName(GroupName, NamePreset, OnlyPresetName)\r\n    function RemoveGroup()\r\n        return trim(string.gsub(NamePreset, GroupName, \"\"))\r\n    end\r\n    local CLName = GroupName .. \" - \" .. NamePreset\r\n    if Settings.HarmonizeCLName == true then\r\n        if string.find(NamePreset, GroupName, 1, true) then\r\n            if OnlyPresetName == true then\r\n                return RemoveGroup()\r\n            else\r\n                return GroupName .. \" - \" .. RemoveGroup()\r\n            end\r\n        else\r\n            if OnlyPresetName == true then\r\n                return NamePreset\r\n            else\r\n                return CLName\r\n            end\r\n        end\r\n    else\r\n        if OnlyPresetName == true then\r\n            return NamePreset\r\n        else\r\n            return CLName\r\n        end\r\n    end\r\nend\r\n\r\n--------------------------\r\n-- Collect Informations --\r\n--------------------------\r\n\r\n--# REQUEST the Preset Type # --\r\n--------------------------------\r\n\r\nInputSettings = {\r\n    Question = Content.Select.Question,\r\n    Description = Content.Select.Description,\r\n    Buttons = Form.OkCancel,\r\n    DefaultButton = Word.Ok,\r\n    DropDown = Form.Preset,\r\n    DropDownDefault = PresetName.Intensity,\r\n    Cancel = true\r\n}\r\n\r\nPresetType = InputDropDown(InputSettings)\r\n\r\n-- If not PresetType defined, exit\r\nif Cancelled(PresetType) then\r\n    goto EXIT\r\nelse\r\n    if PresetName[PresetType] then\r\n        Settings.Type = PresetType\r\n    else\r\n        LogInformation(Content.StopMessage)\r\n        goto EXIT\r\n    end\r\n    LogInformation(\"Preset Type: \" .. PresetType .. \"\\r\\n\\t\" .. \"Create \" .. PresetType .. \" Playbacks\")\r\nend\r\n\r\n--# REQUEST the Fixtures Group # --\r\n-----------------------------------\r\n\r\n-- Request EU number of groups to be threated\r\nInputSettings = {\r\n    Question = Content.Groups.Question,\r\n    Description = Content.Groups.Description,\r\n    Buttons = Form.OkCancel,\r\n    DefaultButton = Word.Ok,\r\n    Cancel = true\r\n}\r\n\r\nSettings.NbOfGroups = InputNumber(InputSettings)\r\n\r\nif Cancelled(Settings.NbOfGroups) then\r\n    goto EXIT\r\nend\r\n\r\n-- Indicate the number of Groups to be threated\r\nSettings.Groups = {}\r\n\r\n-- Request EU details for each group\r\nfor i = 1, Settings.NbOfGroups, 1 do\r\n    -- Request the Group ID\r\n    InputSettings.Question = \"Group n°\" .. i .. \" ID\"\r\n    InputSettings.Description = \"Please indicate the Group n°\" .. i .. \" ID:\"\r\n\r\n    local GroupID = InputNumber(InputSettings)\r\n\r\n    if Cancelled(GroupID) then\r\n        goto EXIT\r\n    end\r\n\r\n    table.insert(Settings.Groups, {id = GroupID, name = Onyx.GetGroupName(GroupID)})\r\nend\r\n\r\n\r\n-- Request the Start Preset ID n°\r\nInputSettings = {\r\n    Question = Content.Cuelist.From.Question,\r\n    Description = Content.Cuelist.From.Description,\r\n    Buttons = Form.OkCancel,\r\n    DefaultButton = Word.Ok,\r\n    Cancel = true\r\n}\r\n\r\nSettings.PresetIDStart = InputNumber(InputSettings)\r\n\r\nif Cancelled(Settings.PresetIDStart) then\r\n    goto EXIT\r\nend\r\n-- Request the Last Preset ID n°\r\nInputSettings.Question = Content.Cuelist.To.Question\r\nInputSettings.Description = Content.Cuelist.To.Description\r\nInputSettings.CurrentValue = Settings.PresetIDStart + 1\r\n\r\nSettings.PresetIDEnd = InputNumber(InputSettings)\r\n\r\nif Cancelled(Settings.PresetIDEnd) then\r\n    goto EXIT\r\nend\r\n\r\n-- Compute the number of Presets\r\nSettings.NumberOfPreset = Settings.PresetIDEnd - Settings.PresetIDStart + 1\r\n\r\n--# REQUEST the Playback Informations # --\r\n------------------------------------------\r\n\r\n-- Starting playback button page\r\nInputSettings.Question = Content.Playback.Page.Question\r\nInputSettings.Description = Content.Playback.Page.Description\r\nInputSettings.CurrentValue = 1\r\n\r\nSettings.PlaybackButtonPage = InputNumber(InputSettings)\r\n\r\nif Cancelled(Settings.PlaybackButtonPage) then\r\n    goto EXIT\r\nend\r\n\r\n-- First playback button\r\nInputSettings.Question = Content.Playback.Button.Question\r\nInputSettings.Description = Content.Playback.Button.Description\r\n\r\nSettings.PlaybackButtonStart = InputNumber(InputSettings)\r\n\r\nif Cancelled(Settings.PlaybackButtonStart) then\r\n    goto EXIT\r\nend\r\n\r\n-- Playback arrangement\r\nInputSettings = {\r\n    Question = Content.Playback.Arrangement.Question,\r\n    Description = Content.Playback.Arrangement.Description,\r\n    Buttons = Form.OkCancel,\r\n    DefaultButton = Word.Ok,\r\n    DropDown = {Word.Vertical, Word.Horizontal},\r\n    DropDownDefault = Word.Vertical,\r\n    Cancel = true\r\n}\r\n\r\nSettings.TextOrientation = InputDropDown(InputSettings)\r\n\r\n-- Playback Grid Width\r\nInputSettings.Question = Content.Playback.Grid.Question\r\nInputSettings.Description = Content.Playback.Grid.Description\r\nInputSettings.CurrentValue = Settings.NumberOfPreset\r\n\r\nSettings.PlaybackWidth = InputNumber(InputSettings)\r\n\r\nif Cancelled(Settings.PlaybackButtonPage) then\r\n    goto EXIT\r\nend\r\n\r\n\r\n--# REQUEST the Cue Fading Time # --\r\n------------------------------------\r\n\r\nInputSettings.Question = Content.Cue.Time.Question\r\nInputSettings.Description = Content.Cue.Time.Description\r\nInputSettings.CurrentValue = 0\r\n\r\nSettings.TimeFade = InputFloatNumber(InputSettings)\r\n\r\nif Cancelled(Settings.TimeFade) then\r\n    goto EXIT\r\nend\r\n\r\n--# REQUEST the Cuelist Release Time # --\r\n-----------------------------------------\r\n\r\nInputSettings.Question = Content.Cuelist.Time.Question\r\nInputSettings.Description = Content.Cuelist.Time.Description\r\nInputSettings.CurrentValue = 0\r\n\r\nSettings.TimeRelease = InputFloatNumber(InputSettings)\r\n\r\nif Cancelled(Settings.TimeRelease) then\r\n    goto EXIT\r\nend\r\n\r\n--# LOG all user choice # --\r\n----------------------------\r\n\r\n-- RESUME of GROUPS\r\nLogActivity(Content.Groups.Options)\r\nLogActivity(\"\\r\\n\\t\" .. \"- \" .. Settings.NbOfGroups .. \" group(s)\")\r\n\r\n-- DETAIL of GROUPS\r\nLogActivity(\"\\r\\n\" .. Content.Groups.List)\r\nfor i, Group in pairs(Settings.Groups) do\r\n    LogActivity(\"\\r\\n\\t\" .. \"- n°\" .. Group.id .. \" - \" .. Group.name)\r\nend\r\n\r\n-- RESUME of PRESETS\r\nLogActivity(\"\\r\\n\" .. Content.Presets.Options)\r\nLogActivity(\"\\r\\n\\t\" .. \"- \" .. PresetType .. \" Presets, from n°\" .. Settings.PresetIDStart .. \" to n°\" .. Settings.PresetIDEnd)\r\n\r\n-- DETAIL of PRESETS\r\nLogActivity(\"\\r\\n\" .. Content.Presets.List)\r\n\r\nSettings.Presets = ListPreset(PresetType, Settings.PresetIDStart, Settings.PresetIDEnd)\r\n\r\nfor i, Preset in pairs(Settings.Presets) do\r\n    LogActivity(\"\\r\\n\\t\" .. \"- n°\" .. Preset.id .. \" \" .. Preset.name)\r\nend\r\n\r\n-- RESUME of PLAYBACK\r\nSettings.GridSize = Settings.NbOfGroups .. \" groups of \" .. Settings.NumberOfPreset .. \" presets\"\r\n\r\nLogActivity(\"\\r\\n\" .. Content.Playback.Options)\r\nLogActivity(\"\\r\\n\\t\" .. \"- Playback page n°\" .. Settings.PlaybackButtonPage)\r\nLogActivity(\"\\r\\n\\t\" .. \"- Playback button n°\" .. Settings.PlaybackButtonStart)\r\nLogActivity(\"\\r\\n\\t\" .. \"- \" .. Settings.TextOrientation .. \" arrangement for \" .. Settings.GridSize .. \" on \" .. Settings.PlaybackWidth .. \" grid width\")\r\n\r\n-- Get the next Cuelist ID available\r\nSettings.StartingEmptyCueList = Onyx.GetNextCuelistNumber()\r\n\r\n-- RESUME of TIMING\r\nLogActivity(Content.Records.Options)\r\nLogActivity(\"\\r\\n\\t\" .. \"- Create Cuelist(s) from n°\" .. Settings.StartingEmptyCueList)\r\nLogActivity(\"\\r\\n\\t\" .. \"- Cue Fade Time: \" .. Settings.TimeFade .. \"s\")\r\nLogActivity(\"\\r\\n\\t\" .. \"- Cuelist Release Time: \" .. Settings.TimeRelease .. \"s\")\r\n\r\n--# USER Validation # --\r\n------------------------\r\n\r\nInputValidationSettings = {\r\n    Question = Content.Validation.Question,\r\n    Description = \"Do you agree to generate \" .. PresetType .. \" Playbacks for \" .. Settings.GridSize .. \", on Playback page n°\" .. Settings.PlaybackButtonPage .. \"?\" .. \"\\n\\r\\n\\r\" .. GetActivity(),\r\n    Buttons = Form.YesNo,\r\n    DefaultButton = Word.Yes\r\n}\r\n\r\nSettings.Validation = InputYesNo(InputValidationSettings)\r\n\r\n--------------------------\r\n--      Execution       --\r\n--------------------------\r\n\r\nCounter = {\r\n    Cuelist = Settings.StartingEmptyCueList,\r\n    PlaybackNumber = Settings.PlaybackButtonStart\r\n}\r\n\r\n::START::\r\n\r\nif Settings.Validation then\r\n    Onyx.Key_ButtonClick(\"Record\") -- Trick to avoid first empty playback button, don't know why it happens ...\r\n    for i, Group in pairs(Settings.Groups) do\r\n        --¨For each preset\r\n        for i, Preset in pairs(Settings.Presets) do\r\n            Onyx.ClearProgrammer()\r\n            if Settings.Step == 1 then\r\n                Sleep(Settings.WaitTime)\r\n                Onyx.SelectGroup(Group.id)\r\n                SleepOption()\r\n                if PresetType == PresetName.PanTilt then\r\n                    Onyx.SelectPanTiltPreset(Preset.id)\r\n                elseif PresetType == PresetName.Color then\r\n                    Onyx.SelectColorPreset(Preset.id)\r\n                elseif PresetType == PresetName.Intensity then\r\n                    Onyx.SelectIntensityPreset(Preset.id)\r\n                elseif PresetType == PresetName.Gobo then\r\n                    Onyx.SelectGoboPreset(Preset.id)\r\n                elseif PresetType == PresetName.Beam then\r\n                    Onyx.SelectBeamPreset(Preset.id)\r\n                end\r\n                Sleep(Settings.WaitTime)\r\n                RecordCuelist(Counter.Cuelist)\r\n                Sleep(Settings.WaitTime)\r\n                Onyx.CopyCuelistToPlaybackButton(\r\n                    Counter.Cuelist,\r\n                    Settings.PlaybackButtonPage,\r\n                    Counter.PlaybackNumber\r\n                )\r\n                Sleep(Settings.WaitTime)\r\n                Onyx.RenameCuelist(CuelistName(Group.name, Preset.name, false))\r\n                if Settings.RenameCue == true then\r\n                    Sleep(Settings.WaitTime)\r\n                    Onyx.RenameCue(1, CuelistName(Group.name, Preset.name, false))\r\n                end\r\n                SleepOption()\r\n                Onyx.SetCueFadeTime(1, Settings.TimeFade)\r\n                SleepOption()\r\n                Onyx.SetCuelistReleaseTime(Counter.Cuelist, Settings.TimeRelease)\r\n            elseif Settings.Step == 2 then\r\n                Onyx.SelectCuelist(Counter.Cuelist)\r\n                Onyx.SetCuelistAppearance(Counter.Cuelist, Preset.appearance) -- Apply the preset appearance to the cuelist\r\n            end\r\n            Counter.Cuelist = Counter.Cuelist + 1 -- Go to next cuelist\r\n            if Settings.Orientation == true then -- Vertical Orientation\r\n                Counter.PlaybackNumber = Counter.PlaybackNumber + Settings.PlaybackWidth -- Set the next position\r\n            else -- Horizontal Orientation\r\n                Counter.PlaybackNumber = Counter.PlaybackNumber + 1 -- Set the next position\r\n            end\r\n        end\r\n        if Settings.Orientation == true then -- Vertical Orientation\r\n            Counter.PlaybackNumber = Settings.PlaybackButtonStart + i\r\n        else -- Horizontal Orientation\r\n            Counter.PlaybackNumber = Settings.PlaybackButtonStart + (Settings.PlaybackWidth * i)\r\n        end\r\n    end\r\n    Sleep(Settings.WaitTime)\r\n    if Settings.Step == 1 then\r\n        Counter.Cuelist = Settings.StartingEmptyCueList\r\n        Counter.PlaybackNumber = Settings.PlaybackButtonStart\r\n        Settings.Step = 2\r\n        goto START\r\n    end\r\n\r\n    FootPrint(\"Creation finished!\")\r\nelse\r\n    Cancelled()\r\nend\r\n\r\n::EXIT::\r\n"
      },
      "IsEnabled": false,
      "ID": "F2 - Create Playbacks Presets",
      "DriverName": "LUA Script",
      "DriverGroup": "ShowCockpit",
      "DriverSuperGroup": "Utilities",
      "LogLevel": 2
    },
    {
      "Options": null,
      "CustomOptions": {
        "luaScript": "-- ShowCockpit LUA Script: DeleteRangeOfCuelist\r\n--   created on ShowCockpit v2.4.2\r\n--   by Spb8 Lighting\r\n--   on 05-09-2018\r\n\r\n-------------\r\n-- Purpose --\r\n-------------\r\n-- This script allows to delete a range of cuelist (batch mode)\r\n\r\n---------------\r\n-- Changelog --\r\n---------------\r\n-- 07-09-2018 - 1.2: Add some block of comment for clearer code reading\r\n--                  + Rename some variables for clearer code reading\r\n-- 07-09-2018 - 1.1: Fix an issue with the maximum ID Cuelist which was lock to 100.\r\n--                  + Add the list of cuelist to be deleted as information on validation\r\n-- 05-09-2018 - 1.0: Creation\r\n\r\n-------------------\r\n-- Configuration --\r\n-------------------\r\n\r\nSettings = {\r\n\tWaitTime = 0.05\r\n}\r\n\r\nScriptInfos = {\r\n\tversion = \"1.2\",\r\n\tname = \"DeleteRangeOfCuelist\"\r\n}\r\n\r\n-- ShowCockpit LUA Script: LuaHeader for Spb8 Lighting LUA Script\r\n\r\n---------------\r\n-- Changelog --\r\n---------------\r\n-- 07-09-2018 - 1.2: Fix input number max issue\r\n--              + add Word.Script.Cancel text value\r\n--              + add Form.Preset list values\r\n--              + update Default Preset Appearance to match Onyx Colors\r\n--              + reword some function parameter name\r\n--              + add ListCuelit()\r\n--              + add the possibility to define default value for InputNumber and InputFloatNumber\r\n-- 06-09-2018 - 1.1: Add Preset Name Framing, Add Generic GetPresetName, Add Generic DeletePreset\r\n-- 05-09-2018 - 1.0: Creation\r\n\r\n--------------------\r\n--    Variables   --\r\n--------------------\r\n\r\nif Settings.WaitTime == nil or Settings.WaitTime == \"\" then\r\n\tSettings.WaitTime = 0.5\r\nend\r\n\r\nPresetName = {\r\n    Intensity = \"Intensity\",\r\n\tPanTilt = \"PanTilt\",\r\n\tColor = \"Color\",\r\n\tGobo = \"Gobo\",\r\n\tBeam = \"Beam\",\r\n\tBeamFX = \"BeamFX\",\r\n\tFraming = \"Framing\"\r\n}\r\n\r\nScriptInfos = {\r\n\tversion = ScriptInfos.version,\r\n\tname = ScriptInfos.name,\r\n\tauthor = \"Sylvain Guiblain\",\r\n\tcontact = \"sylvain.guiblain@gmail.com\",\r\n\twebsite = \"https://github.com/Spb8Lighting/OnyxLuaScripts\"\r\n}\r\n\r\nInfos = {\r\n\tSentence = \"Scripted by \" .. ScriptInfos.author .. \"\\r\\n\\r\\n\" .. ScriptInfos.contact .. \"\\r\\n\\r\\n\" .. ScriptInfos.website,\r\n\tScript = ScriptInfos.name .. \" v\" .. ScriptInfos.version\r\n}\r\n\r\nAppearance = {\r\n\tWhite = \"#-1551\",\r\n\tRed = \"#-2686966\",\r\n\tOrange = \"#-33280\",\r\n\tYellow = \"#-2560\",\r\n\tLime = \"#-3342592\",\r\n\tGreen = \"#-16711936\",\r\n\tCyan = \"#-167714241\",\r\n\tLightBlue = \"#-16746497\",\r\n\tBlue = \"#-16769537\",\r\n\tUv = \"#-13959025\",\r\n\tPink = \"#-52996\",\r\n\tMagenta = \"#-65333\"\r\n}\r\n\r\nDefaultAppearance = {\r\n\tIntensity = Appearance.White,\r\n\tPanTilt = Appearance.Red,\r\n\tColor = Appearance.White,\r\n    Gobo = Appearance.Green,\r\n\tBeam = Appearance.Yellow,\r\n\tBeamFX = Appearance.Cyan,\r\n\tFraming = Appearance.Magenta\r\n}\r\n\r\nBPMTiming = {\r\n\tHalf = \"1/2\",\r\n\tThird = \"1/3\",\r\n\tQuarter = \"1/4\"\r\n}\r\n\r\nWord = {\r\n    Script = {\r\n        Cancel = \"Script has been cancelled! Nothing performed.\"\r\n    },\r\n\tOk = \"Ok\",\r\n\tCancel = \"Cancel\",\r\n\tReset = \"Reset\",\r\n\tYes = \"Yes\",\r\n\tNo = \"No\",\r\n\tVertical = \"Vertical\",\r\n\tHorizontal = \"Horizontal\"\r\n}\r\n\r\nForm = {\r\n\tOk = {\r\n\t\tWord.Ok\r\n\t},\r\n\tOkCancel = {\r\n\t\tWord.Ok,\r\n\t\tWord.Cancel\r\n\t},\r\n\tYesNo = {\r\n\t\tWord.Yes,\r\n\t\tWord.No\r\n    },\r\n    Preset = {\r\n        PresetName.Intensity,\r\n        PresetName.PanTilt,\r\n        PresetName.Color,\r\n        PresetName.Gobo,\r\n        PresetName.Beam,\r\n        PresetName.BeamFX,\r\n        PresetName.Framing\r\n    }\r\n}\r\n\r\n-- Get Onyx Software object\r\n\r\nOnyx = GetElement(\"Onyx\")\r\n\r\n--------------------\r\n--General Function--\r\n--------------------\r\n\r\nfunction HeadPrint()\r\n\tLogInformation(Infos.Script .. \"\\r\\n\\t\" .. Infos.Sentence) --Notification\r\nend\r\n\r\nfunction FootPrint(Sentence)\r\n\tLogInformation(Sentence .. \"\\r\\n\\t\" .. Infos.Sentence)\r\n\tInfos = {\r\n\t\tQuestion = Infos.Script,\r\n\t\tDescription = Sentence .. \"\\r\\n\\r\\n\" .. Infos.Sentence,\r\n\t\tButtons = Form.Ok,\r\n\t\tDefaultButton = Word.Ok\r\n\t}\r\n\tInputYesNo(Infos)\r\nend\r\n\r\nfunction Cancelled(variable)\r\n\tif variable == nil or variable == \"\" then\r\n\t\tFootPrint(Word.Script.Cancel)\r\n\t\treturn true\r\n\telse\r\n\t\treturn false\r\n\tend\r\nend\r\n\r\nfunction CheckInput(Infos, Answer)\r\n\tif Answer[\"button\"] == Word.Yes then\r\n\t\tAnswer[\"input\"] = true\r\n\tend\r\n\tif Infos.Cancel == true then\r\n\t\tif Answer[\"button\"] == Word.Yes then\r\n\t\t\tAnswer[\"input\"] = true\r\n\t\telseif Answer[\"button\"] == Word.Cancel or Answer[\"button\"] == Word.No then\r\n\t\t\tAnswer[\"input\"] = nil\r\n\t\tend\r\n\tend\r\n\treturn Answer\r\nend\r\n\r\nfunction Input(Infos, Type)\r\n\t-- Create the Prompt\r\n\tPrompt = CreatePrompt(Infos.Question, Infos.Description)\r\n\r\n\t-- Prompt settings\r\n\tif Type then\r\n\t\tPrompt.SetType(Type)\r\n\tend\r\n\tPrompt.SetButtons(Infos.Buttons)\r\n\tPrompt.SetDefaultButton(Infos.DefaultButton)\r\n\r\n\t-- Return the prompt\r\n\treturn Prompt\r\nend\r\n\r\nfunction InputDropDown(Infos)\r\n\t-- Get the IntegerInput Prompt with default settings\r\n\tPrompt = Input(Infos, \"DropDown\")\r\n\t-- Prompt settings\r\n\tPrompt.SetDropDownOptions(Infos.DropDown)\r\n\tPrompt.SetDefaultValue(Infos.DropDownDefault)\r\n\r\n\treturn ShowInput(Prompt, Infos)\r\nend\r\n\r\nfunction InputYesNo(Infos)\r\n\t-- Get the IntegerInput Prompt with default settings\r\n\tPrompt = Input(Infos)\r\n\treturn ShowInput(Prompt, Infos)\r\nend\r\n\r\nfunction InputNumber(Infos)\r\n\t-- Get the IntegerInput Prompt with default settings\r\n\tPrompt = Input(Infos, \"IntegerInput\")\r\n\t-- Prompt settings\r\n\tPrompt.SetMinValue(1)\r\n\tPrompt.SetMaxValue(10000)\r\n\tif Infos.CurrentValue then\r\n\t\tPrompt.SetDefaultValue(Infos.CurrentValue)\r\n\tend\r\n\r\n\treturn ShowInput(Prompt, Infos)\r\nend\r\n\r\nfunction InputFloatNumber(Infos)\r\n\t-- Get the IntegerInput Prompt with default settings\r\n\tPrompt = Input(Infos, \"FloatInput\")\r\n\t-- Prompt settings\r\n\tPrompt.SetMinValue(0)\r\n\tif Infos.CurrentValue then\r\n\t\tPrompt.SetDefaultValue(Infos.CurrentValue)\r\n\tend\r\n\r\n\treturn ShowInput(Prompt, Infos)\r\nend\r\n\r\nfunction ShowInput(Prompt, Infos)\r\n\t-- Display the prompt\r\n\tAnswer = Prompt.Show()\r\n\r\n\treturn CheckInput(Infos, Answer)[\"input\"]\r\nend\r\n\r\n--------------------\r\n--     Logging    --\r\n--------------------\r\n\r\nMessages = {}\r\n\r\nfunction LogActivity(text)\r\n\ttable.insert(Messages, text)\r\nend\r\n\r\nfunction GetActivity()\r\n\tlocal Feedback = \"\"\r\n\tfor i, Message in pairs(Messages) do\r\n\t\tFeedback = Feedback .. \"\\n\" .. Message\r\n\tend\r\n\treturn Feedback\r\nend\r\n\r\n--------------------\r\n--   Functions    --\r\n--------------------\r\n\r\nfunction trim(s)\r\n\treturn (s:gsub(\"^%s*(.-)%s*$\", \"%1\"))\r\nend\r\n\r\nfunction CopyCue(CuelistIDSource, CueID, CuelistIDTarget)\r\n\tSleep(Settings.WaitTime)\r\n\tOnyx.SelectCuelist(CuelistIDSource)\r\n\tSleep(Settings.WaitTime)\r\n\tOnyx.Key_ButtonClick(\"Copy\")\r\n\tSleep(Settings.WaitTime)\r\n\tOnyx.Key_ButtonClick(\"Cue\")\r\n\tSleep(Settings.WaitTime)\r\n\tKeyNumber(CueID)\r\n\tOnyx.Key_ButtonClick(\"At\")\r\n\tSleep(Settings.WaitTime)\r\n\tOnyx.SelectCuelist(CuelistIDTarget)\r\n\tSleep(Settings.WaitTime)\r\n\tOnyx.Key_ButtonClick(\"Enter\")\r\n\tSleep(Settings.WaitTime)\r\nend\r\n\r\nfunction KeyNumber(Number)\r\n\tif string.find(Number, \"%d\", 1, false) then\r\n\t\ta = string.match(Number, \"(.+)\")\r\n\t\tfor c in a:gmatch \".\" do\r\n\t\t\tOnyx.Key_ButtonClick(\"Num\" .. c)\r\n\t\tend\r\n\t\tSleep(Settings.WaitTime)\r\n\tend\r\nend\r\n\r\nfunction RecordCuelist(CuelistID)\r\n\tOnyx.Key_ButtonClick(\"Record\")\r\n\tSleep(Settings.WaitTime)\r\n\tOnyx.Key_ButtonClick(\"Slash\")\r\n\tSleep(Settings.WaitTime)\r\n\tOnyx.Key_ButtonClick(\"Slash\")\r\n\tKeyNumber(CuelistID)\r\n\tOnyx.Key_ButtonClick(\"Enter\")\r\n\tSleep(Settings.WaitTime)\r\n\tOnyx.Key_ButtonClick(\"Enter\")\r\n\treturn true\r\nend\r\n\r\nfunction CheckEmpty(Chain, default)\r\n\tif Chain == nil or Chain == \"\" then\r\n\t\tif default then\r\n\t\t\treturn default\r\n\t\telse\r\n\t\t\treturn \"---\"\r\n\t\tend\r\n\telse\r\n\t\treturn Chain\r\n\tend\r\nend\r\n\r\nfunction GetPresetName(PresetType, PresetID)\r\n\tif PresetType == PresetName.PanTilt then\r\n\t\treturn CheckEmpty(Onyx.GetPanTiltPresetName(PresetID))\r\n\telseif PresetType == PresetName.Color then\r\n\t\treturn CheckEmpty(Onyx.GetColorPresetName(PresetID))\r\n\telseif PresetType == PresetName.Intensity then\r\n\t\treturn CheckEmpty(Onyx.GetIntensityPresetName(PresetID))\r\n\telseif PresetType == PresetName.Gobo then\r\n\t\treturn CheckEmpty(Onyx.GetGoboPresetName(PresetID))\r\n\telseif PresetType == PresetName.Beam then\r\n\t\treturn CheckEmpty(Onyx.GetBeamPresetName(PresetID))\r\n\telseif PresetType == PresetName.BeamFX then\r\n\t\treturn CheckEmpty(Onyx.GetBeamFXPresetName(PresetID))\r\n\telseif PresetType == PresetName.Framing then\r\n\t\treturn CheckEmpty(Onyx.GetFramingPresetName(PresetID))\r\n\telse\r\n\t\treturn false\r\n\tend\r\nend\r\n\r\nfunction GetPresetAppearance(PresetType, PresetID)\r\n\tif PresetType == PresetName.PanTilt then\r\n\t\treturn CheckEmpty(Onyx.GetPanTiltPresetAppearance(PresetID), DefaultAppearance.PanTilt)\r\n\telseif PresetType == PresetName.Color then\r\n\t\treturn CheckEmpty(Onyx.GetColorPresetAppearance(PresetID), DefaultAppearance.Color)\r\n\telseif PresetType == PresetName.Intensity then\r\n\t\treturn CheckEmpty(Onyx.GetIntensityPresetAppearance(PresetID), DefaultAppearance.Intensity)\r\n\telseif PresetType == PresetName.Gobo then\r\n\t\treturn CheckEmpty(Onyx.GetGoboPresetAppearance(PresetID), DefaultAppearance.Gobo)\r\n\telseif PresetType == PresetName.Beam then\r\n\t\treturn CheckEmpty(Onyx.GetBeamPresetAppearance(PresetID), DefaultAppearance.Beam)\r\n\telseif PresetType == PresetName.BeamFX then\r\n\t\treturn CheckEmpty(Onyx.GetBeamFXPresetAppearance(PresetID), DefaultAppearance.BeamFX)\r\n\telseif PresetType == PresetName.Framing then\r\n\t\treturn CheckEmpty(Onyx.GetFramingPresetAppearance(PresetID), DefaultAppearance.Framing)\r\n\telse\r\n\t\treturn false\r\n\tend\r\nend\r\n\r\nfunction DeletePreset(PresetType, PresetID)\r\n\tif PresetType == PresetName.PanTilt then\r\n\t\tOnyx.DeletePanTiltPreset(PresetID)\r\n\telseif PresetType == PresetName.Color then\r\n\t\tOnyx.DeleteColorPreset(PresetID)\r\n\telseif PresetType == PresetName.Intensity then\r\n\t\tOnyx.DeleteIntensityPreset(PresetID)\r\n\telseif PresetType == PresetName.Gobo then\r\n\t\tOnyx.DeleteGoboPreset(PresetID)\r\n\telseif PresetType == PresetName.Beam then\r\n\t\tOnyx.DeleteBeamPreset(PresetID)\r\n\telseif PresetType == PresetName.BeamFX then\r\n\t\tOnyx.DeleteBeamFXPreset(PresetID)\r\n\telseif PresetType == PresetName.Framing then\r\n\t\tOnyx.DeleteFramingPreset(PresetID)\r\n\tend\r\n\treturn true\r\nend\r\n\r\nfunction ListPreset(PresetType, PresetIDStart, PresetIDEnd)\r\n\tPresets = {}\r\n\tfor i = PresetIDStart, PresetIDEnd, 1 do\r\n\t\ttable.insert(\r\n\t\t\tPresets,\r\n\t\t\t{\r\n\t\t\t\tid = i,\r\n\t\t\t\tname = GetPresetName(PresetType, i),\r\n\t\t\t\tappearance = GetPresetAppearance(PresetType, i)\r\n\t\t\t}\r\n\t\t)\r\n\tend\r\n\treturn Presets\r\nend\r\n\r\nfunction ListCuelist(CuelistIDStart, CuelistIDEnd)\r\n\tCuelists = {}\r\n\tfor i = CuelistIDStart, CuelistIDEnd, 1 do\r\n\t\ttable.insert(\r\n\t\t\tCuelists,\r\n\t\t\t{\r\n\t\t\t\tid = i,\r\n\t\t\t\tname = CheckEmpty(Onyx.GetCuelistName(i))\r\n\t\t\t}\r\n\t\t)\r\n\tend\r\n\treturn Cuelists\r\nend\r\n\r\nHeadPrint()\r\n-- End of Header --\r\n\r\n\r\n\r\n----------------------------------------------------\r\n-- Main Script - dont change if you don't need to --\r\n----------------------------------------------------\r\n\r\n--------------------------\r\n-- Sentence and Wording --\r\n--------------------------\r\n\r\nContent = {\r\n\tStopMessage = \"Stopped!\" .. \"\\r\\n\\t\" .. \"The Preset type defined in the script configuration is not supported\",\r\n\tDone = \"Deletion Ended!\",\r\n\tOptions = \"Delete Options:\",\r\n\tCuelistList = \"Cuelists List:\",\r\n\tFrom = {\r\n\t\tQuestion = \"Delete from Cuelist n°\",\r\n\t\tDescription = \"Indicate the first Cuelist ID number (from cuelist repository)\"\r\n\t},\r\n\tTo = {\r\n\t\tQuestion = \"To Cuelist n°\",\r\n\t\tDescription = \"Indicate the last Cuelist ID number (from cuelist repository)\"\r\n\t},\r\n\tValidation = {\r\n\t\tQuestion = \"Are you sure to delete following Cuelists?\",\r\n\t\tDescription = \"WARNING, it can't be UNDO! Use it with caution!\"\r\n\t}\r\n}\r\n\r\n--------------------------\r\n-- Collect Informations --\r\n--------------------------\r\n\r\n--# REQUEST the Cuelist Range # --\r\n----------------------------------\r\n\r\n-- Request the Start Cuelist ID n°\r\nInputSettings = {\r\n\tQuestion = Content.From.Question,\r\n\tDescription = Content.From.Description,\r\n\tButtons = Form.OkCancel,\r\n\tDefaultButton = Word.Ok,\r\n\tCancel = true\r\n}\r\n\r\nSettings.CuelistIDStart = InputNumber(InputSettings)\r\n\r\nif Cancelled(Settings.CuelistIDStart) then\r\n\tgoto EXIT\r\nend\r\n-- Request the Last Cuelist ID n°\r\nInputSettings.Question = Content.To.Question\r\nInputSettings.Description = Content.To.Description\r\nInputSettings.CurrentValue = Settings.CuelistIDStart + 1\r\n\r\nSettings.CuelistIDEnd = InputNumber(InputSettings)\r\n\r\nif Cancelled(Settings.CuelistIDEnd) then\r\n\tgoto EXIT\r\nend\r\n\r\n--# LOG all user choice # --\r\n----------------------------\r\n\r\n-- RESUME of action to be performed\r\nLogActivity(Content.Options)\r\nLogActivity(\"\\r\\n\\t\" .. \"- Delete Cuelists, from n°\" .. Settings.CuelistIDStart ..\" to n°\" .. Settings.CuelistIDEnd )\r\n\r\n-- DETAIL of impacted Cuelists\r\nLogActivity(\"\\r\\n\" .. Content.CuelistList)\r\n\r\nCuelists = ListCuelist(Settings.CuelistIDStart, Settings.CuelistIDEnd)\r\n\r\nfor i, Cuelist in pairs(Cuelists) do\r\n    LogActivity(\"\\r\\n\\t\" .. '- n°' .. Cuelist.id .. ' ' .. Cuelist.name)\r\nend\r\n\r\n--# USER Validation # --\r\n------------------------\r\n\r\nInputValidationSettings = {\r\n\tQuestion = Content.Validation.Question,\r\n\tDescription = Content.Validation.Description .. \"\\n\\r\\n\\r\" .. GetActivity(),\r\n\tButtons = Form.YesNo,\r\n\tDefaultButton = Word.Yes\r\n}\r\n\r\nSettings.Validation = InputYesNo(InputValidationSettings)\r\n\r\n--------------------------\r\n--      Execution       --\r\n--------------------------\r\n\r\nif Settings.Validation then\r\n    -- Iterate through the Cuelist list\r\n\tfor CuelistID = Settings.CuelistIDStart, Settings.CuelistIDEnd do\r\n\t\tOnyx.DeleteCuelist(CuelistID)\r\n\t\tSleep(Settings.WaitTime)\r\n    end\r\n    -- Display a end pop-up\r\n\tFootPrint(Content.Done)\r\nelse\r\n\tCancelled()\r\nend\r\n\r\n::EXIT::\r\n"
      },
      "IsEnabled": false,
      "ID": "F11 - Delete Cuelists",
      "DriverName": "LUA Script",
      "DriverGroup": "ShowCockpit",
      "DriverSuperGroup": "Utilities",
      "LogLevel": 2
    },
    {
      "Options": {},
      "CustomOptions": {
        "luaScript": "-- ShowCockpit LUA Script: DeleteRangeOfPreset\r\n--   created on ShowCockpit v2.4.2\r\n--   by Spb8 Lighting\r\n--   on 05-09-2018\r\n\r\n-------------\r\n-- Purpose --\r\n-------------\r\n-- This script allows to delete a range of presets (batch mode)\r\n\r\n---------------\r\n-- Changelog --\r\n---------------\r\n-- 07-09-2018 - 1.4: Update function to check the PresetType\r\n--                  + Add some block of comment for clearer code reading\r\n--                  + Rename some variables for clearer code reading\r\n-- 07-09-2018 - 1.3: The \"To ID Preset\" is now automatically populate with the \"From ID Preset\" +1\r\n-- 06-09-2018 - 1.2: Add Framing Preset, Add list of preset to be deleted in the final report before validation\r\n-- 06-09-2018 - 1.1: Add a drop down menu Preset Selection instead of having as lua file than preset type\r\n-- 05-09-2018 - 1.0: Creation\r\n\r\n-------------------\r\n-- Configuration --\r\n-------------------\r\n\r\nSettings = {\r\n    WaitTime = 0.05\r\n}\r\n\r\nScriptInfos = {\r\n    version = \"1.4\",\r\n    name = \"DeleteRangeOfPreset\"\r\n}\r\n\r\n-- ShowCockpit LUA Script: LuaHeader for Spb8 Lighting LUA Script\r\n\r\n---------------\r\n-- Changelog --\r\n---------------\r\n-- 07-09-2018 - 1.2: Fix input number max issue\r\n--              + add Word.Script.Cancel text value\r\n--              + add Form.Preset list values\r\n--              + update Default Preset Appearance to match Onyx Colors\r\n--              + reword some function parameter name\r\n--              + add ListCuelit()\r\n--              + add the possibility to define default value for InputNumber and InputFloatNumber\r\n-- 06-09-2018 - 1.1: Add Preset Name Framing, Add Generic GetPresetName, Add Generic DeletePreset\r\n-- 05-09-2018 - 1.0: Creation\r\n\r\n--------------------\r\n--    Variables   --\r\n--------------------\r\n\r\nif Settings.WaitTime == nil or Settings.WaitTime == \"\" then\r\n\tSettings.WaitTime = 0.5\r\nend\r\n\r\nPresetName = {\r\n    Intensity = \"Intensity\",\r\n\tPanTilt = \"PanTilt\",\r\n\tColor = \"Color\",\r\n\tGobo = \"Gobo\",\r\n\tBeam = \"Beam\",\r\n\tBeamFX = \"BeamFX\",\r\n\tFraming = \"Framing\"\r\n}\r\n\r\nScriptInfos = {\r\n\tversion = ScriptInfos.version,\r\n\tname = ScriptInfos.name,\r\n\tauthor = \"Sylvain Guiblain\",\r\n\tcontact = \"sylvain.guiblain@gmail.com\",\r\n\twebsite = \"https://github.com/Spb8Lighting/OnyxLuaScripts\"\r\n}\r\n\r\nInfos = {\r\n\tSentence = \"Scripted by \" .. ScriptInfos.author .. \"\\r\\n\\r\\n\" .. ScriptInfos.contact .. \"\\r\\n\\r\\n\" .. ScriptInfos.website,\r\n\tScript = ScriptInfos.name .. \" v\" .. ScriptInfos.version\r\n}\r\n\r\nAppearance = {\r\n\tWhite = \"#-1551\",\r\n\tRed = \"#-2686966\",\r\n\tOrange = \"#-33280\",\r\n\tYellow = \"#-2560\",\r\n\tLime = \"#-3342592\",\r\n\tGreen = \"#-16711936\",\r\n\tCyan = \"#-167714241\",\r\n\tLightBlue = \"#-16746497\",\r\n\tBlue = \"#-16769537\",\r\n\tUv = \"#-13959025\",\r\n\tPink = \"#-52996\",\r\n\tMagenta = \"#-65333\"\r\n}\r\n\r\nDefaultAppearance = {\r\n\tIntensity = Appearance.White,\r\n\tPanTilt = Appearance.Red,\r\n\tColor = Appearance.White,\r\n    Gobo = Appearance.Green,\r\n\tBeam = Appearance.Yellow,\r\n\tBeamFX = Appearance.Cyan,\r\n\tFraming = Appearance.Magenta\r\n}\r\n\r\nBPMTiming = {\r\n\tHalf = \"1/2\",\r\n\tThird = \"1/3\",\r\n\tQuarter = \"1/4\"\r\n}\r\n\r\nWord = {\r\n    Script = {\r\n        Cancel = \"Script has been cancelled! Nothing performed.\"\r\n    },\r\n\tOk = \"Ok\",\r\n\tCancel = \"Cancel\",\r\n\tReset = \"Reset\",\r\n\tYes = \"Yes\",\r\n\tNo = \"No\",\r\n\tVertical = \"Vertical\",\r\n\tHorizontal = \"Horizontal\"\r\n}\r\n\r\nForm = {\r\n\tOk = {\r\n\t\tWord.Ok\r\n\t},\r\n\tOkCancel = {\r\n\t\tWord.Ok,\r\n\t\tWord.Cancel\r\n\t},\r\n\tYesNo = {\r\n\t\tWord.Yes,\r\n\t\tWord.No\r\n    },\r\n    Preset = {\r\n        PresetName.Intensity,\r\n        PresetName.PanTilt,\r\n        PresetName.Color,\r\n        PresetName.Gobo,\r\n        PresetName.Beam,\r\n        PresetName.BeamFX,\r\n        PresetName.Framing\r\n    }\r\n}\r\n\r\n-- Get Onyx Software object\r\n\r\nOnyx = GetElement(\"Onyx\")\r\n\r\n--------------------\r\n--General Function--\r\n--------------------\r\n\r\nfunction HeadPrint()\r\n\tLogInformation(Infos.Script .. \"\\r\\n\\t\" .. Infos.Sentence) --Notification\r\nend\r\n\r\nfunction FootPrint(Sentence)\r\n\tLogInformation(Sentence .. \"\\r\\n\\t\" .. Infos.Sentence)\r\n\tInfos = {\r\n\t\tQuestion = Infos.Script,\r\n\t\tDescription = Sentence .. \"\\r\\n\\r\\n\" .. Infos.Sentence,\r\n\t\tButtons = Form.Ok,\r\n\t\tDefaultButton = Word.Ok\r\n\t}\r\n\tInputYesNo(Infos)\r\nend\r\n\r\nfunction Cancelled(variable)\r\n\tif variable == nil or variable == \"\" then\r\n\t\tFootPrint(Word.Script.Cancel)\r\n\t\treturn true\r\n\telse\r\n\t\treturn false\r\n\tend\r\nend\r\n\r\nfunction CheckInput(Infos, Answer)\r\n\tif Answer[\"button\"] == Word.Yes then\r\n\t\tAnswer[\"input\"] = true\r\n\tend\r\n\tif Infos.Cancel == true then\r\n\t\tif Answer[\"button\"] == Word.Yes then\r\n\t\t\tAnswer[\"input\"] = true\r\n\t\telseif Answer[\"button\"] == Word.Cancel or Answer[\"button\"] == Word.No then\r\n\t\t\tAnswer[\"input\"] = nil\r\n\t\tend\r\n\tend\r\n\treturn Answer\r\nend\r\n\r\nfunction Input(Infos, Type)\r\n\t-- Create the Prompt\r\n\tPrompt = CreatePrompt(Infos.Question, Infos.Description)\r\n\r\n\t-- Prompt settings\r\n\tif Type then\r\n\t\tPrompt.SetType(Type)\r\n\tend\r\n\tPrompt.SetButtons(Infos.Buttons)\r\n\tPrompt.SetDefaultButton(Infos.DefaultButton)\r\n\r\n\t-- Return the prompt\r\n\treturn Prompt\r\nend\r\n\r\nfunction InputDropDown(Infos)\r\n\t-- Get the IntegerInput Prompt with default settings\r\n\tPrompt = Input(Infos, \"DropDown\")\r\n\t-- Prompt settings\r\n\tPrompt.SetDropDownOptions(Infos.DropDown)\r\n\tPrompt.SetDefaultValue(Infos.DropDownDefault)\r\n\r\n\treturn ShowInput(Prompt, Infos)\r\nend\r\n\r\nfunction InputYesNo(Infos)\r\n\t-- Get the IntegerInput Prompt with default settings\r\n\tPrompt = Input(Infos)\r\n\treturn ShowInput(Prompt, Infos)\r\nend\r\n\r\nfunction InputNumber(Infos)\r\n\t-- Get the IntegerInput Prompt with default settings\r\n\tPrompt = Input(Infos, \"IntegerInput\")\r\n\t-- Prompt settings\r\n\tPrompt.SetMinValue(1)\r\n\tPrompt.SetMaxValue(10000)\r\n\tif Infos.CurrentValue then\r\n\t\tPrompt.SetDefaultValue(Infos.CurrentValue)\r\n\tend\r\n\r\n\treturn ShowInput(Prompt, Infos)\r\nend\r\n\r\nfunction InputFloatNumber(Infos)\r\n\t-- Get the IntegerInput Prompt with default settings\r\n\tPrompt = Input(Infos, \"FloatInput\")\r\n\t-- Prompt settings\r\n\tPrompt.SetMinValue(0)\r\n\tif Infos.CurrentValue then\r\n\t\tPrompt.SetDefaultValue(Infos.CurrentValue)\r\n\tend\r\n\r\n\treturn ShowInput(Prompt, Infos)\r\nend\r\n\r\nfunction ShowInput(Prompt, Infos)\r\n\t-- Display the prompt\r\n\tAnswer = Prompt.Show()\r\n\r\n\treturn CheckInput(Infos, Answer)[\"input\"]\r\nend\r\n\r\n--------------------\r\n--     Logging    --\r\n--------------------\r\n\r\nMessages = {}\r\n\r\nfunction LogActivity(text)\r\n\ttable.insert(Messages, text)\r\nend\r\n\r\nfunction GetActivity()\r\n\tlocal Feedback = \"\"\r\n\tfor i, Message in pairs(Messages) do\r\n\t\tFeedback = Feedback .. \"\\n\" .. Message\r\n\tend\r\n\treturn Feedback\r\nend\r\n\r\n--------------------\r\n--   Functions    --\r\n--------------------\r\n\r\nfunction trim(s)\r\n\treturn (s:gsub(\"^%s*(.-)%s*$\", \"%1\"))\r\nend\r\n\r\nfunction CopyCue(CuelistIDSource, CueID, CuelistIDTarget)\r\n\tSleep(Settings.WaitTime)\r\n\tOnyx.SelectCuelist(CuelistIDSource)\r\n\tSleep(Settings.WaitTime)\r\n\tOnyx.Key_ButtonClick(\"Copy\")\r\n\tSleep(Settings.WaitTime)\r\n\tOnyx.Key_ButtonClick(\"Cue\")\r\n\tSleep(Settings.WaitTime)\r\n\tKeyNumber(CueID)\r\n\tOnyx.Key_ButtonClick(\"At\")\r\n\tSleep(Settings.WaitTime)\r\n\tOnyx.SelectCuelist(CuelistIDTarget)\r\n\tSleep(Settings.WaitTime)\r\n\tOnyx.Key_ButtonClick(\"Enter\")\r\n\tSleep(Settings.WaitTime)\r\nend\r\n\r\nfunction KeyNumber(Number)\r\n\tif string.find(Number, \"%d\", 1, false) then\r\n\t\ta = string.match(Number, \"(.+)\")\r\n\t\tfor c in a:gmatch \".\" do\r\n\t\t\tOnyx.Key_ButtonClick(\"Num\" .. c)\r\n\t\tend\r\n\t\tSleep(Settings.WaitTime)\r\n\tend\r\nend\r\n\r\nfunction RecordCuelist(CuelistID)\r\n\tOnyx.Key_ButtonClick(\"Record\")\r\n\tSleep(Settings.WaitTime)\r\n\tOnyx.Key_ButtonClick(\"Slash\")\r\n\tSleep(Settings.WaitTime)\r\n\tOnyx.Key_ButtonClick(\"Slash\")\r\n\tKeyNumber(CuelistID)\r\n\tOnyx.Key_ButtonClick(\"Enter\")\r\n\tSleep(Settings.WaitTime)\r\n\tOnyx.Key_ButtonClick(\"Enter\")\r\n\treturn true\r\nend\r\n\r\nfunction CheckEmpty(Chain, default)\r\n\tif Chain == nil or Chain == \"\" then\r\n\t\tif default then\r\n\t\t\treturn default\r\n\t\telse\r\n\t\t\treturn \"---\"\r\n\t\tend\r\n\telse\r\n\t\treturn Chain\r\n\tend\r\nend\r\n\r\nfunction GetPresetName(PresetType, PresetID)\r\n\tif PresetType == PresetName.PanTilt then\r\n\t\treturn CheckEmpty(Onyx.GetPanTiltPresetName(PresetID))\r\n\telseif PresetType == PresetName.Color then\r\n\t\treturn CheckEmpty(Onyx.GetColorPresetName(PresetID))\r\n\telseif PresetType == PresetName.Intensity then\r\n\t\treturn CheckEmpty(Onyx.GetIntensityPresetName(PresetID))\r\n\telseif PresetType == PresetName.Gobo then\r\n\t\treturn CheckEmpty(Onyx.GetGoboPresetName(PresetID))\r\n\telseif PresetType == PresetName.Beam then\r\n\t\treturn CheckEmpty(Onyx.GetBeamPresetName(PresetID))\r\n\telseif PresetType == PresetName.BeamFX then\r\n\t\treturn CheckEmpty(Onyx.GetBeamFXPresetName(PresetID))\r\n\telseif PresetType == PresetName.Framing then\r\n\t\treturn CheckEmpty(Onyx.GetFramingPresetName(PresetID))\r\n\telse\r\n\t\treturn false\r\n\tend\r\nend\r\n\r\nfunction GetPresetAppearance(PresetType, PresetID)\r\n\tif PresetType == PresetName.PanTilt then\r\n\t\treturn CheckEmpty(Onyx.GetPanTiltPresetAppearance(PresetID), DefaultAppearance.PanTilt)\r\n\telseif PresetType == PresetName.Color then\r\n\t\treturn CheckEmpty(Onyx.GetColorPresetAppearance(PresetID), DefaultAppearance.Color)\r\n\telseif PresetType == PresetName.Intensity then\r\n\t\treturn CheckEmpty(Onyx.GetIntensityPresetAppearance(PresetID), DefaultAppearance.Intensity)\r\n\telseif PresetType == PresetName.Gobo then\r\n\t\treturn CheckEmpty(Onyx.GetGoboPresetAppearance(PresetID), DefaultAppearance.Gobo)\r\n\telseif PresetType == PresetName.Beam then\r\n\t\treturn CheckEmpty(Onyx.GetBeamPresetAppearance(PresetID), DefaultAppearance.Beam)\r\n\telseif PresetType == PresetName.BeamFX then\r\n\t\treturn CheckEmpty(Onyx.GetBeamFXPresetAppearance(PresetID), DefaultAppearance.BeamFX)\r\n\telseif PresetType == PresetName.Framing then\r\n\t\treturn CheckEmpty(Onyx.GetFramingPresetAppearance(PresetID), DefaultAppearance.Framing)\r\n\telse\r\n\t\treturn false\r\n\tend\r\nend\r\n\r\nfunction DeletePreset(PresetType, PresetID)\r\n\tif PresetType == PresetName.PanTilt then\r\n\t\tOnyx.DeletePanTiltPreset(PresetID)\r\n\telseif PresetType == PresetName.Color then\r\n\t\tOnyx.DeleteColorPreset(PresetID)\r\n\telseif PresetType == PresetName.Intensity then\r\n\t\tOnyx.DeleteIntensityPreset(PresetID)\r\n\telseif PresetType == PresetName.Gobo then\r\n\t\tOnyx.DeleteGoboPreset(PresetID)\r\n\telseif PresetType == PresetName.Beam then\r\n\t\tOnyx.DeleteBeamPreset(PresetID)\r\n\telseif PresetType == PresetName.BeamFX then\r\n\t\tOnyx.DeleteBeamFXPreset(PresetID)\r\n\telseif PresetType == PresetName.Framing then\r\n\t\tOnyx.DeleteFramingPreset(PresetID)\r\n\tend\r\n\treturn true\r\nend\r\n\r\nfunction ListPreset(PresetType, PresetIDStart, PresetIDEnd)\r\n\tPresets = {}\r\n\tfor i = PresetIDStart, PresetIDEnd, 1 do\r\n\t\ttable.insert(\r\n\t\t\tPresets,\r\n\t\t\t{\r\n\t\t\t\tid = i,\r\n\t\t\t\tname = GetPresetName(PresetType, i),\r\n\t\t\t\tappearance = GetPresetAppearance(PresetType, i)\r\n\t\t\t}\r\n\t\t)\r\n\tend\r\n\treturn Presets\r\nend\r\n\r\nfunction ListCuelist(CuelistIDStart, CuelistIDEnd)\r\n\tCuelists = {}\r\n\tfor i = CuelistIDStart, CuelistIDEnd, 1 do\r\n\t\ttable.insert(\r\n\t\t\tCuelists,\r\n\t\t\t{\r\n\t\t\t\tid = i,\r\n\t\t\t\tname = CheckEmpty(Onyx.GetCuelistName(i))\r\n\t\t\t}\r\n\t\t)\r\n\tend\r\n\treturn Cuelists\r\nend\r\n\r\nHeadPrint()\r\n-- End of Header --\r\n\r\n\r\n\r\n----------------------------------------------------\r\n-- Main Script - dont change if you don't need to --\r\n----------------------------------------------------\r\n\r\n--------------------------\r\n-- Sentence and Wording --\r\n--------------------------\r\n\r\nContent = {\r\n    StopMessage = \"Stopped!\" .. \"\\r\\n\\t\" .. \"The Preset type defined in the script configuration is not supported\",\r\n    Done = \"Deletion Ended!\",\r\n    Options = \"Delete Options:\",\r\n    PresetList = \"Preset list:\",\r\n    Select = {\r\n        Question = \"Which type of preset do you want to delete?\",\r\n        Description = \"Please select the preset type you want to delete from the list:\"\r\n    },\r\n    From = {\r\n        Question = \"Delete from Preset n°\",\r\n        Description = \"Indicate the first Preset ID number:\"\r\n    },\r\n    To = {\r\n        Question = \"To Preset n°\",\r\n        Description = \"Indicate the last Preset ID number:\"\r\n    },\r\n    Validation = {\r\n        Question = \"Are you sure to delete following Presets?\",\r\n        Description = \"WARNING, it can't be UNDO! Use it with caution!\"\r\n    }\r\n}\r\n\r\n--------------------------\r\n-- Collect Informations --\r\n--------------------------\r\n\r\n--# REQUEST the Preset Type # --\r\n--------------------------------\r\n\r\nInputSettings = {\r\n    Question = Content.Select.Question,\r\n    Description = Content.Select.Description,\r\n    Buttons = Form.OkCancel,\r\n    DefaultButton = Word.Ok,\r\n    DropDown = Form.Preset,\r\n    DropDownDefault = PresetName.Intensity,\r\n    Cancel = true\r\n}\r\n\r\nPresetType = InputDropDown(InputSettings)\r\n\r\n-- If not PresetType defined, exit\r\nif Cancelled(PresetType) then\r\n    goto EXIT\r\nelse\r\n    if PresetName[PresetType] then\r\n        Settings.Type = PresetType\r\n    else\r\n        LogInformation(Content.StopMessage)\r\n        goto EXIT\r\n    end\r\n    LogInformation(\"Preset Type: \" .. PresetType .. \"\\r\\n\\t\" .. \"Delete \" .. PresetType .. \" presets\")\r\nend\r\n\r\n--# REQUEST the Preset Range # --\r\n---------------------------------\r\n\r\n-- Request the Start Preset ID n°\r\nInputSettings = {\r\n    Question = Content.From.Question,\r\n    Description = Content.From.Description,\r\n    Buttons = Form.OkCancel,\r\n    DefaultButton = Word.Ok,\r\n    Cancel = true\r\n}\r\n\r\nSettings.PresetIDStart = InputNumber(InputSettings)\r\n\r\nif Cancelled(Settings.PresetIDStart) then\r\n    goto EXIT\r\nend\r\n\r\n-- Request the Last Preset ID n°\r\nInputSettings.Question = Content.To.Question\r\nInputSettings.Description = Content.To.Description\r\nInputSettings.CurrentValue = Settings.PresetIDStart + 1\r\n\r\nSettings.PresetIDEnd = InputNumber(InputSettings)\r\n\r\nif Cancelled(Settings.PresetIDEnd) then\r\n    goto EXIT\r\nend\r\n\r\n--# LOG all user choice # --\r\n----------------------------\r\n\r\n-- RESUME of action to be performed\r\nLogActivity(Content.Options)\r\nLogActivity(\"\\r\\n\\t\" .. \"- Delete \" .. PresetType .. \" Presets, from n°\" .. Settings.PresetIDStart ..\" to n°\" .. Settings.PresetIDEnd )\r\n\r\n-- DETAIL of impacted presets\r\nLogActivity(\"\\r\\n\" .. Content.PresetList)\r\n\r\nPresets = ListPreset(PresetType, Settings.PresetIDStart, Settings.PresetIDEnd)\r\n\r\nfor i, Preset in pairs(Presets) do\r\n    LogActivity(\"\\r\\n\\t\" .. '- n°' .. Preset.id .. ' ' .. Preset.name)\r\nend\r\n\r\n--# USER Validation # --\r\n------------------------\r\n\r\nInputValidationSettings = {\r\n    Question = Content.Validation.Question,\r\n    Description = Content.Validation.Description .. \"\\n\\r\\n\\r\" .. GetActivity(),\r\n    Buttons = Form.YesNo,\r\n    DefaultButton = Word.Yes\r\n}\r\n\r\nSettings.Validation = InputYesNo(InputValidationSettings)\r\n\r\n--------------------------\r\n--      Execution       --\r\n--------------------------\r\n\r\nif Settings.Validation then\r\n    -- Iterate through the Preset list\r\n    for PresetID = Settings.PresetIDStart, Settings.PresetIDEnd do\r\n        DeletePreset(PresetType, PresetID)\r\n        Sleep(Settings.WaitTime)\r\n    end\r\n    -- Display a end pop-up\r\n    FootPrint(Content.Done)\r\nelse\r\n    Cancelled()\r\nend\r\n\r\n::EXIT::\r\n"
      },
      "IsEnabled": false,
      "ID": "F12 - Delete Presets",
      "DriverName": "LUA Script",
      "DriverGroup": "ShowCockpit",
      "DriverSuperGroup": "Utilities",
      "LogLevel": 2
    }
  ],
  "mapping": {
    "Keyboard Keys": {
      "F12": [
        {
          "ElementID": "F12 - Delete Presets",
          "Function": {
            "ID": "Execute Script",
            "Description": "Controls a main playback fader",
            "ControlType": "Button, Signal",
            "ParameterList": {
              "Pre-Execute": {
                "ValueType": "String",
                "Value": ""
              },
              "Post-Execute": {
                "ValueType": "String",
                "Value": ""
              }
            }
          }
        }
      ],
      "F11": [
        {
          "ElementID": "F11 - Delete Cuelists",
          "Function": {
            "ID": "Execute Script",
            "Description": "Controls a main playback fader",
            "ControlType": "Button, Signal",
            "ParameterList": {
              "Pre-Execute": {
                "ValueType": "String",
                "Value": ""
              },
              "Post-Execute": {
                "ValueType": "String",
                "Value": ""
              }
            }
          }
        }
      ],
      "F1": [
        {
          "ElementID": "F1 - Update Cue Fade Cuelist Release",
          "Function": {
            "ID": "Execute Script",
            "Description": "Controls a main playback fader",
            "ControlType": "Button, Signal",
            "ParameterList": {
              "Pre-Execute": {
                "ValueType": "String",
                "Value": ""
              },
              "Post-Execute": {
                "ValueType": "String",
                "Value": ""
              }
            }
          }
        }
      ],
      "F2": [
        {
          "ElementID": "F2 - Create Playbacks Presets",
          "Function": {
            "ID": "Execute Script",
            "Description": "Controls a main playback fader",
            "ControlType": "Button, Signal",
            "ParameterList": {
              "Pre-Execute": {
                "ValueType": "String",
                "Value": ""
              },
              "Post-Execute": {
                "ValueType": "String",
                "Value": ""
              }
            }
          }
        }
      ]
    }
  },
  "settings": {
    "Name": "Onyx LUA"
  }
}